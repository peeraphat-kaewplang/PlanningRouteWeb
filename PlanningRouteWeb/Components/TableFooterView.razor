
@{
    var grpData = LoadFooter();
}
<tr>
    <td rowspan="2" colspan="4" class="sticky-col first-col" style="z-index:20;"></td>
    <td></td>
    <td class="text-end fw-bold" style="font-size: 12px;">
        @beforeSale
    </td>
    <td class="text-end fw-bold" style="font-size: 12px;">
        @beforeMTD
    </td>
    <td class="text-end fw-bold" style="font-size: 12px;">
        @currentMTD
    </td>
    @if (!HideMaster)
    {
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.MONDAY == true)</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.TUESDAY == true)</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.WEDNESDAY == true)</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.THURSDAY == true)</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.FRIDAY == true)</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.SATURDAY == true)</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@Data.Count(c => c.SUNDAY == true)</td>
        <td colspan="3" rowspan="2"></td>
    }
    
    <td rowspan="2" class="text-end fw-bold" style="font-size: 12px;">
        @Data.Sum(x => x.SALE_LAST_WEEK)
    </td>
    <td rowspan="2" class="text-end fw-bold" style="font-size: 12px;">
        @DropMonth.Sum(x =>x)
    </td>
    @foreach (var (obj, index) in grpData.WithIndex())
    {
        var error = obj.COUNT_STATUS_MANUAL == obj.MAX_DROP ? "success" : "error";
        <td class=@($"text-center fw-bold {error}") style="font-size: 12px;">@obj.COUNT_STATUS_MANUAL</td>
        <td rowspan="@(obj.IsCurrent ? 1 : 2)" class="text-end fw-bold" style="font-size: 12px;">
            @obj.SUM_SALETOTAL
        </td>
        <td rowspan="2" style="font-size: 12px;"></td>
        if ((index + 1) % 7 == 0)
        {
            <td rowspan="2" class="text-end fw-bold" style="font-size: 12px;">@CalSumSaleWeek(grpData , index )</td>
            <td rowspan="2" class="text-end fw-bold" style="font-size: 12px;">@CalSumSaleWeekDiff(grpData , index )</td>
        }
    }
</tr>
<tr>
    <td></td>
    <td></td>
    @{
        var style1 = (beforeSale - beforeMTD) > 1 ? "sum-current-mtd" : "sum-error-mtd";
        var style2 = (beforeMTD - currentMTD) > 1 ? "sum-current-mtd" : "sum-error-mtd";
    }
    <td class=@($"text-end fw-bold {style1}") style="font-size: 12px;">
        @(beforeSale - beforeMTD)
    </td>
    <td class=@($"text-end fw-bold {style2}") style="font-size: 12px;">
        @(beforeMTD - currentMTD)
    </td>
    @if (!HideMaster)
    {
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.MONDAY == true))</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.TUESDAY == true))</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.WEDNESDAY == true))</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.THURSDAY == true))</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.FRIDAY == true))</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.SATURDAY == true))</td>
        <td class="text-center fw-bold" style="font-size: 12px;">@(Target - Data.Count(c => c.SUNDAY == true))</td>
    }

    @foreach (var (obj, index) in grpData.WithIndex())
    {
        var error = obj.COUNT_STATUS_MANUAL == obj.MAX_DROP ? "success" : "error";
        <td class=@($"text-center fw-bold {error}") style="font-size: 12px;">@obj.MAX_DROP</td>
        if (obj.IsCurrent)
        {
            <td class="text-end fw-bold" style="font-size: 12px;">@obj.SUM_SALETOTAL_TOTAL</td>
        }
    }
</tr>

@inject StateContainer StateContainer

@code {
    [Parameter]
    public IDictionary<string, ColumnProperty> Columns { get; set; } = new Dictionary<string, ColumnProperty>();
    [Parameter]
    public List<PlanningMasterData2> Data { get; set; } = new();
    [Parameter]
    public List<int> DropMonth { get; set; } = new();
    [Parameter]
    public int Target { get; set; }
    [Parameter]
    public bool HideMaster { get; set; }

    public int beforeSale;
    public int beforeMTD;
    public int currentMTD;

    protected override void OnInitialized()
    {
        beforeSale = Data.Sum(x => !string.IsNullOrWhiteSpace(x.BEFORE_SALE) ? int.Parse(x.BEFORE_SALE) : 0);
        beforeMTD = Data.Sum(x => !string.IsNullOrWhiteSpace(x.BEFORE_MTD) ? int.Parse(x.BEFORE_MTD) : 0);
        currentMTD = Data.Sum(x => !string.IsNullOrWhiteSpace(x.CURRENT_MTD) ? int.Parse(x.CURRENT_MTD) : 0);
    }

    private List<ColumnFooter> LoadFooter()
    {
        var planDetail = new List<PlanningDetail2>();
        var planDrop = new List<PlanningDetail2>();
        foreach (var x in Data)
        {
            if(x.GroupData.Count() > 1)
            {
                foreach (var i in x.GroupData.Skip(0))
                {
                    foreach (var d in i.GETPLAN_DETAIL)
                    {
                        if (d.RANK != null)
                        {
                            planDrop.Add(d);
                        }
                    }
                }
            }
            else
            {
                planDrop.AddRange(x.GETPLAN_DETAIL);
            }

            planDetail.AddRange(x.GETPLAN_DETAIL);
        }

        return planDetail.GroupBy(a => a.CALENDAR_DATE, (key, grp) => new ColumnFooter
        {
            FieldDate = key,
            // COUNT_STATUS_MANUAL =  grp.Count(x => x.DOC_TYPE == "1"),
            COUNT_STATUS_MANUAL = planDrop.Where(x => x.CALENDAR_DATE == key && x.DOC_TYPE == "1").Count(),
            MAX_DROP = !string.IsNullOrWhiteSpace(grp.FirstOrDefault()!.MAX_DROP) ? int.Parse(grp.FirstOrDefault()!.MAX_DROP) : 0,
            IsCurrent = StateContainer.DateCurrent.ToContainsDate(key),
            SUM_SALETOTAL = StateContainer.DateCurrent.ToContainsDate(key) ?
            grp.Sum(x => x.STATUS_MANUAL && !string.IsNullOrWhiteSpace(x.DOC_TYPE) || x.IsCurrent ? x.SALETOTAL : 0):
            grp.Sum(x => !string.IsNullOrWhiteSpace(x.DOC_TYPE) ? x.SALETOTAL : 0),
            SUM_SALETOTAL_TOTAL = grp.Sum(x => x.SALETOTAL != 0 ? x.SALETOTAL : x.AMOUNT),
        })
        .ToList();
    }

    private double CalSumSaleWeek(List<ColumnFooter> row ,int index)
    {
        var task = 7;
        var skip = index - task;
        var sum = row.Skip(skip).Take(task).Sum(s => s.SUM_SALETOTAL);
        return sum;
    }

    private double CalSumSaleWeekDiff(List<ColumnFooter> row, int index)
    {
        var task = 7;
        var skip = index - task;
        var last = Data.Sum(x => x.SALE_LAST_WEEK_END);

        double sum = 0;
        if (index == task)
        {
            var totalWeek = row.Skip(skip).Take(task).Sum(s => s.SUM_SALETOTAL);
            sum = last - totalWeek;
            return sum;
        }
        else
        {
            var totalWeek = row.Skip(skip).Take(task).Sum(s => s.SUM_SALETOTAL);
            var lastWeek = row.Skip(skip - task).Take(task).Sum(s => s.SUM_SALETOTAL);
            sum = lastWeek - totalWeek;
            return sum;
        }
    }
}
