@foreach (var (item, index) in data.WithIndex())
{
    var countDropMonth = item.GETPLAN_DETAIL.Count(x => x.STATUS_MANUAL);
    var styleMachine = item.CHANGE_ACTION == "C" ? "change-machine" : item.CHANGE_ACTION == "R" ? "return-machine" : item.CHANGE_ACTION == "N" ? "new-machine" : null;
    <tr>
        <td class="">
            <RadzenText MouseEnter="@(args => ShowTooltip(args , item) )" class="mb-0" Style="font-size: 12px; cursor : pointer;width:4rem;">
                <div class="d-inline-block text-truncate" style="width:4rem">@item.CUSTOMER_NAME</div>
            </RadzenText>
        </td>
        <td class="@styleMachine fw-bold" style="font-size: 8px;">
            @item.MACHINE_CODE
            @item.LOCATION_CODE
        </td>
        <td class="fw-bold" style="font-size: 8px;">
            @item.MACHINE_MODEL
        </td>
        <td class="" style="font-size: 12px; cursor: pointer;" 
        @onclick="() => ShowdialogChangeProductCallback.InvokeAsync((new ChangeProductRequest{
        ChangeDate = DateTime.Now.ToStringDate() ,
        Location = item.LOCATION_CODE ,
        Machine = item.MACHINE_CODE ,
        ORG = item.ORGANIZATION_CODE } , true))">
            1%
        </td>
        <td class="" style="font-size: 12px;">
           2%
        </td>

        <td class="" style="font-size: 12px;">
            0%
        </td>

        <td class="" style="font-size: 12px; cursor:pointer;" @onclick="() => ShowdialogProductLowQtyCallback.InvokeAsync(item.MACHINE_CODE)">
            <div class="d-flex justify-content-around">
                <div>2</div>
                <div>/</div>
                <div>10</div>
            </div>
        </td>

       @*  <td class="" style="font-size: 12px;">
            @{
                var style = item.ISONLINE == "1" ? "color:green;" : "color:gray";
            }
            <div class="d-flex">
                @if (item.ISONLINE == "1" && item.IS_LOW_QTY == "1")
                {
                    <RadzenIcon Icon="warning" Style="color:red;cursor:pointer;" @onclick="() => ShowdialogProductLowQtyCallback.InvokeAsync(item.MACHINE_CODE)" />
                }
            </div>
        </td> *@
      @*   <td class="sticky-col last-col" style="font-size: 12px;">
            <RadzenText MouseEnter="@(args => ShowTooltip(args , item.MACHINE_MODEL) )" class="mb-0" Style="font-size: 12px; cursor : pointer;">
                <div class="d-inline-block text-truncate" style="width: 3rem;">
                    @item.MACHINE_MODEL
                </div>
            </RadzenText>
        </td>
        <td class="text-end" style="font-size: 12px;">
            <div class="d-inline-block" style="width:99%">
                @(
                    !string.IsNullOrWhiteSpace(item.TOTAL_FEE) ? 
                    double.Parse(item.TOTAL_FEE) == 0 ? item.TOTAL_FEE :
                    double.Parse(item.TOTAL_FEE).ToString("0,0.00", CultureInfo.InvariantCulture) : 
                    item.TOTAL_FEE
                 )
            </div>
        </td> *@
        @* <td class="text-end fw-bold sticky-col six-col" style="font-size: 8px;"> *@
        <td class="text-end fw-bold" style="font-size: 8px;">
            <div class="d-inline-block" style="width:99%">
                @(!string.IsNullOrWhiteSpace(item.BEFORE_SALE) ? double.Parse(item.BEFORE_SALE).ToString("0,0", CultureInfo.InvariantCulture) : item.BEFORE_SALE)
            </div>
        </td>
        @* <td class="text-end fw-bold sticky-col sevent-col" style="font-size: 8px;"> *@
        <td class="text-end fw-bold" style="font-size: 8px;">
            <div class="d-inline-block" style="width:99%">
                @(!string.IsNullOrWhiteSpace(item.BEFORE_MTD) ? double.Parse(item.BEFORE_MTD).ToString("0,0", CultureInfo.InvariantCulture) : item.BEFORE_MTD)
             </div>
        </td>
        @* <td class="text-end fw-bold sticky-col eight-col" style="font-size: 8px;"> *@
        <td class="text-end fw-bold" style="font-size: 8px;">
            <div class="d-inline-block" style="width:99%">
                @(!string.IsNullOrWhiteSpace(item.CURRENT_MTD) ? double.Parse(item.CURRENT_MTD).ToString("0,0", CultureInfo.InvariantCulture) : item.CURRENT_MTD)
            </div>
        </td>

        @* ค่ามาตรฐาน *@
        @if (!HideMaster)
        {
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.MONDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.TUESDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.WEDNESDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.THURSDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.FRIDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.SATURDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div>
                    <RadzenCheckBox @bind-Value=@item.SUNDAY @onclick="()=>OnChangeMasterCallback.InvokeAsync(item)" />
                </div>
            </td>
            <td class="px-1 text-center ">
            @* <td class="px-1 text-center"> *@
                <div style="font-size: 12px;">
                    @item.DROPWEEK
                </div>
            </td>
            <td class="px-1 " style="font-size: 12px;">
            @* <td class="px-1" style="font-size: 12px;"> *@
                    @if (item.GroupData.Count() == 1)
                    {
                        @* เข้ารอบเดียว *@
                        <div class="d-flex align-items-center justify-content-center gap-1">
                            @item.MSORT
                            <RadzenButton Click=@(args => OnChangeRowCallback.InvokeAsync((item , item.GroupData[0], !item.GroupData[0].IS_DUPLICATE ? "add" : "del")))
                                          Text="@(item.IS_DUPLICATE ? "-" : "+")"
                                          ButtonStyle="@(!item.IS_DUPLICATE ? ButtonStyle.Primary : ButtonStyle.Danger)"
                                          Size="Radzen.ButtonSize.ExtraSmall"
                                          Style="width: 25px;text-transform: none;" />
                            <RadzenButton 
                                          Icon="announcement"
                                          ButtonStyle="ButtonStyle.Success" 
                                          Size="Radzen.ButtonSize.ExtraSmall"
                                          Style="width: 25px;text-transform: none;" />
                        </div>
                        @*<div class="d-flex">
                           <div class="d-flex align-items-center justify-content-center border-end border-dark" style="width: 4rem;">
                                @item.MSORT
                                <RadzenButton Click=@(args => OnChangeRowCallback.InvokeAsync((item , item.GroupData[0], !item.GroupData[0].IS_DUPLICATE ? "add" : "del")))
                                              Text="@(item.IS_DUPLICATE ? "-" : "+")"
                                              ButtonStyle="@(!item.IS_DUPLICATE ? ButtonStyle.Primary : ButtonStyle.Danger)"
                                              Size="Radzen.ButtonSize.ExtraSmall"
                                              Style="width: 25px;text-transform: none;" />
                            </div>
                            <div class="p-1 w-100">
                                <RadzenTextBox class="w-100 text-size" @bind-Value=@item.GroupData[0].REMARK />
                            </div>
                     </div>*@
                    }
                    else
                    {
                        @* เข้าหลายรอบ *@
                        @foreach (var (g, idx) in item.GroupData.WithIndex())
                        {
                            var borderGrp = idx == item.GroupData.Count() - 1 ? "" : "border-bottom border-dark ";
                            <div class="@borderGrp d-flex align-items-center justify-content-center gap-1 p-1">
                                @g.MSORT
                                <RadzenButton Click=@(args => OnChangeRowCallback.InvokeAsync((item , g , !g.IS_DUPLICATE ? "add" : "del")))
                                            Text="@(g.IS_DUPLICATE ? "-" : "+")"
                                            ButtonStyle="@(!g.IS_DUPLICATE ? ButtonStyle.Primary : ButtonStyle.Danger)"
                                            Size="Radzen.ButtonSize.ExtraSmall"
                                            Style="width: 25px;text-transform: none;" />

                                <RadzenButton 
                                            Icon="announcement"
                                            ButtonStyle="ButtonStyle.Success" 
                                            Size="Radzen.ButtonSize.ExtraSmall"
                                            Style="width: 25px;text-transform: none;" />
                            </div>
                        @*  <div class=@($"d-flex {borderGrp}")>
                                <div class="d-flex align-items-center justify-content-center border-end border-dark" style="width: 4rem;">
                                    @g.MSORT
                                    <RadzenButton Click=@(args => OnChangeRowCallback.InvokeAsync((item , g , !g.IS_DUPLICATE ? "add" : "del")))
                                                  Text="@(g.IS_DUPLICATE ? "-" : "+")"
                                                  ButtonStyle="@(!g.IS_DUPLICATE ? ButtonStyle.Primary : ButtonStyle.Danger)"
                                                  Size="Radzen.ButtonSize.ExtraSmall"
                                                  Style="width: 25px;text-transform: none;" />

                                </div>
                               <div class="p-1 w-100">
                                    <RadzenTextBox class="w-100 text-size" @bind-Value=@g.REMARK />
                                </div>
                            </div>*@
                        }
                    }
            </td>
            <td class="text-center" >
                <RadzenButton 
                 Click=@(()=> ShowdialogBestProductCallback.InvokeAsync(new BestProductRequest{
                      Location = item.LOCATION_CODE ,
                      Machine = item.MACHINE_CODE ,
                      ORG = item.ORGANIZATION_CODE
                 }))
                Icon="pageview"
                ButtonStyle="ButtonStyle.Primary"
                Size="ButtonSize.ExtraSmall"
                Style="text-transform: none;" />
            </td>
        }

       @*  <td class="text-end">
            <div style="font-size: 12px;width: 100%">
                @(item.SALE_LAST_WEEK.ToString("0,0", CultureInfo.InvariantCulture))
            </div>
        </td> *@
        <td class="text-end" style="font-size: 12px;">
            <div style="font-size: 12px;width: 100%">
                @countDropMonth
            </div>
        </td>

        @foreach (var (i, idx) in item.GETPLAN_DETAIL.WithIndex())
        {
            var boolToday = StateContainer.DateCurrent.ToContainsDate(i.CALENDAR_DATE);
            var color = string.IsNullOrWhiteSpace(i.DOC_TYPE) ? "text-amount" : null;
            var today = boolToday ? "today" : null;

            var stylePlan = i.DOC_TYPE == "1" && i.STATUS_MANUAL ? "plan-success" :
            i.STATUS_MANUAL && string.IsNullOrWhiteSpace(i.DOC_TYPE) && !i.IsCurrent && !boolToday ? "plan-error" :
            !i.STATUS_MANUAL && i.SALETOTAL != 0 ? "plan-out" :
            boolToday && string.IsNullOrWhiteSpace(i.DOC_TYPE) ? "plan-notdue" : i.IsCurrent && i.STATUS_MANUAL ? "plan-change" : "";

            @if (i.IsCurrent)
            {
                <td class=@($"{today} {stylePlan} {isEmptyPlan!} text-center") >
                    <div>
                        <RadzenCheckBox Disabled="@(!i.IsCurrent || i.REQUISITION == "1")"
                        @key="item"
                        @bind-Value=@i.STATUS_MANUAL
                        @onclick=@(()=> OnChangCallback.InvokeAsync((index, i ,item.GETPLAN_DETAIL))) 
                        />
                    </div>
                  
                </td>
                <td class=@($"{today} {stylePlan} {isEmptyPlan!} text-end")>
                    <RadzenText class=@($"mb-0 fw-bold") Style="font-size: 8px;">
                        @if (i.STATUS_MANUAL)
                        {
                            var changePrd = i.CHANGEPRODUCT == "1" ? "change-pro" : "change-pro-chk";
                            var flex = !ActionChangeProduct ? "d-flex justify-content-between" : "text-end";
                            <div class=@($"{flex}")>
                                @if(!ActionChangeProduct)
                                {
                                    @if (i.REQUISITION != "1")
                                    {
                                        <RadzenIcon @onclick="() => ShowdialogChangeProductCallback.InvokeAsync((new ChangeProductRequest{
                                        ChangeDate = i.CALENDAR_DATE ,
                                        Location = item.LOCATION_CODE ,
                                        Machine = item.MACHINE_CODE ,
                                        ORG = item.ORGANIZATION_CODE } , i.IsCurrent))"
                                                    Icon="cached"
                                                    class=@(changePrd)
                                        style="font-weight: 700;font-size: 16px;" />
                                    }
                                    else
                                    {
                                        <RadzenIcon Icon="cached" style="font-weight: 700;font-size: 16px;" />
                                    }
                                }
                                <p class="m-0">
                                    @(i.SALETOTAL == 0 ? i.AMOUNT == 0 ? i.AMOUNT : i.AMOUNT.ToString("0,0", CultureInfo.InvariantCulture) : i.SALETOTAL.ToString("0,0", CultureInfo.InvariantCulture))
                                </p>
                            </div>
                        }
                        else
                        {
                            <p class="m-0 text-amount">
                                @(i.SALETOTAL == 0 ? i.AMOUNT == 0 ? i.AMOUNT : i.AMOUNT.ToString("0,0", CultureInfo.InvariantCulture) : i.SALETOTAL.ToString("0,0", CultureInfo.InvariantCulture))
                            </p>    
                        }
                    </RadzenText>
                </td>
                <td class=@($"{today} text-center p-0")>
                    @if (i.STATUS_MANUAL)
                    {
                        <div class="d-flex flex-column">
                          
                            @foreach (var (g, seq) in item.GroupData.WithIndex())
                            {
                                var borderGrp = seq == item.GroupData.Count() - 1 ? null : "border-bottom border-dark";
                                var iGrp = data[index].GroupData[seq].GETPLAN_DETAIL.FindIndex(x => x.CALENDAR_DATE == i.CALENDAR_DATE);

                                @* var rankError = ActionButton!.Date.Find(x => x.Date == g.GETPLAN_DETAIL.Find(x => x.CALENDAR_DATE == i.CALENDAR_DATE)!.CALENDAR_DATE); *@

                                var styleRank = data[index].GroupData[seq].GETPLAN_DETAIL[iGrp].RANK == null ? "rank-warning" : FindRankGroup(data[index].GroupData[seq].GETPLAN_DETAIL[iGrp].RANK, i.CALENDAR_DATE, item.LOCATION_CODE) ? "rank-error" : "rank-success";
                                <div class=@($"d-flex {borderGrp} ")>
                                        @if (i.REQUISITION == "1")
                                        {
                                            <div class="d-flex align-items-center justify-content-center w-100" style="width: 1rem;font-size: 8px;">
                                                @i.RANK
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="p-1 w-100">
                                            <RadzenNumeric class=@($"text-size {styleRank} w-100")
                                                           ShowUpDown="false"
                                                           Disabled="@(!i.IsCurrent)"
                                                           TextAlign="TextAlign.Center"
                                                           TValue="int?"
                                                           @bind-Value=@data[index].GroupData[seq].GETPLAN_DETAIL[iGrp].RANK
                                                           Change=@(args => ChageRank(args , i.CALENDAR_DATE , item.LOCATION_CODE , index , seq , true)) />
                                            </div>
                                        }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        @if (item.GroupData.Count() == 1)
                        {
                            <div>
                                <div class="d-flex align-items-center justify-content-center" style="width: 1rem;">
                                    @i.RANK
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex flex-column">
                                @foreach (var (g, seq) in item.GroupData.WithIndex())
                                {
                                    var val = g.GETPLAN_DETAIL.Single(x => x.CALENDAR_DATE == i.CALENDAR_DATE);
                                    var borderGrp = seq == item.GroupData.Count() - 1 ? null : "border-bottom border-dark";
                                    <div class=@($"{borderGrp}")>
                                        <div class="d-flex align-items-center justify-content-center w-100" style="height: 2rem;">
                                            @val!.RANK
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                </td>
            }
            else
            {
                <td class=@($"{today} {stylePlan} text-center") >

                    @if (i.STATUS_MANUAL)
                    {
                        <RadzenIcon Icon="done" class="nomal-chk" style="font-weight: 700;font-size: 16px;" />
                    }
                </td>

                <td class=@($"{today} {stylePlan} text-end fw-bold p-0 ") >
                    <div class=@(i.CHANGEPRODUCT == "1" ? "d-flex justify-content-between" : "d-flex justify-content-end") style="font-size: 8px;">
                        
                        @if (i.CHANGEPRODUCT == "1")
                        {
                            <RadzenIcon @onclick="() => ShowdialogChangeProductCallback.InvokeAsync((new ChangeProductRequest{
                            ChangeDate = i.CALENDAR_DATE ,
                            Location = item.LOCATION_CODE ,
                            Machine = item.MACHINE_CODE ,
                            ORG = item.ORGANIZATION_CODE }, i.IsCurrent))"
                                        Icon="cached"
                                        style="font-weight: 700;font-size: 16px;cursor: pointer;" />
                        }

                        @if (i.SALETOTAL != 0)
                        {
                            @*  <RadzenText MouseEnter="@(args => ShowTooltipValue(args ,i.AMOUNT.ToString("0,0", CultureInfo.InvariantCulture)) )" class=@($"m-0 fw-bold {color}") style="font-size: 8px;cursor : pointer;">
                                @i.SALETOTAL.ToString("0,0", CultureInfo.InvariantCulture)
                            </RadzenText> *@
                            <div>
                                <div style="font-size:8px">
                                    @i.SALETOTAL.ToString("0,0", CultureInfo.InvariantCulture)
                                </div>
                                <div class="text-secondary" style="font-size:7px">
                                    @i.AMOUNT.ToStringNumberFormat(false)
                                </div>
                            </div>
                        }
                    </div>
                </td>
                <td class=@($"{today} text-center fw-bold p-0") style="font-size: 8px;">
                    @if (item.GroupData.Count() == 1)
                    {
                        <div class="d-flex align-items-center justify-content-center" style="height: 2rem;">
                            @i.RANK
                        </div>
                    }
                    else
                    {
                        <div class="d-flex flex-column">
                            @foreach (var (g, seq) in item.GroupData.WithIndex())
                            {
                                var val = g.GETPLAN_DETAIL.Find(x => x.CALENDAR_DATE == i.CALENDAR_DATE);
                                var borderGrp = seq == item.GroupData.Count() - 1 ? null : "border-bottom border-dark";
                                <div class=@($"{borderGrp}")>
                                    <div class="d-flex align-items-center justify-content-center w-100" style="height: 2rem;">
                                        @val!.RANK
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </td>
            }

            if ((idx + 1) % 7 == 0)
            {
                var saleWeek = CalSaleWeek(item.GETPLAN_DETAIL, idx + 1);
                var diff = CalSaleWeek(item.GETPLAN_DETAIL, idx + 1, item);
                var clsStyle = CalSaleWeek(item.GETPLAN_DETAIL, idx + 1, item) > 1 ? "success" : "danger";
                <td class="text-end salweek fw-bold" style=" font-size: 8px;">
                    @(saleWeek == 0 ? saleWeek : saleWeek.ToString("0,0", CultureInfo.InvariantCulture))
                </td>
                <td class="@clsStyle text-end fw-bold" style=" font-size: 8px;">
                    @(diff == 0 ? diff : diff.ToString("0,0", CultureInfo.InvariantCulture))
                </td>
            }
        }
    </tr>
}
@inject TooltipService TooltipService
@inject StateContainer StateContainer
@code {
    [Parameter]
    public bool HideMaster { get; set; }
    [Parameter]
    public string? SelectOrg { get; set; }
    [Parameter]
    public string? SelectRoute { get; set; }
    [Parameter]
    public List<PlanningMasterData2> data { get; set; } = new List<PlanningMasterData2>();
    [Parameter]
    public EventCallback<(int, PlanningDetail2, List<PlanningDetail2>)> OnChangCallback { get; set; }
    [Parameter]
    public EventCallback<PlanningMasterData2> OnChangeMasterCallback { get; set; }
    [Parameter]
    public EventCallback<(ChangeProductRequest ,bool)> ShowdialogChangeProductCallback { get; set; }
    [Parameter]
    public EventCallback<string> ShowdialogProductLowQtyCallback { get; set; }
    [Parameter]
    public EventCallback<BestProductRequest> ShowdialogBestProductCallback { get; set; }
    [Parameter]
    public EventCallback<(int?, string, string)> OnChageRankCallback { get; set; }
    [Parameter]
    public EventCallback<(PlanningMasterData2 item, Group2 grp, string action)> OnChangeRowCallback { get; set; }
    [Parameter]
    public ChangeActionButton? ActionButton { get; set; }
    [Parameter]
    public bool ActionChangeProduct { get; set;}

    // private void ShowTooltip(ElementReference elementReference, string text, TooltipOptions? options = null) => TooltipService.Open(elementReference, $"{text}", new TooltipOptions { Duration = 1500, Style = "font-size: 16px" });

    void ShowTooltip(ElementReference elementReference,PlanningMasterData2 item, TooltipOptions options = null) => TooltipService.Open(elementReference, ds =>
    @<div >
        <RadzenText Style="font-size: 14px;color: var(--rz-base-200)">@item.CUSTOMER_NAME</RadzenText>
        <RadzenText Style="font-size: 14px;color: var(--rz-base-200)">@item.LOCATION_NAME</RadzenText>
    </div>, new TooltipOptions
          {
              Duration = 1500
          });

    private void ShowTooltipValue(ElementReference elementReference, string text) => TooltipService.Open(elementReference, $"ยอดขายประมาณการณ์ : {text}", new TooltipOptions { Duration = 1000, Style = "font-size: 12px" });

    private async Task ChageRank(int? rank, string date, string location, int index = 0, int seq = 0 ,bool fbool = false)
    {
        var aaa = data[index].GroupData[seq].GETPLAN_DETAIL.FindIndex(x => x.CALENDAR_DATE == date);
        data[index].GroupData[seq].GETPLAN_DETAIL[aaa].RANK = rank;
        
        await OnChageRankCallback.InvokeAsync((rank, date, location));
    }

    private bool FindRankGroup(int? rank, string date, string location)
    {
        var detail = new List<DeatilRank>();
        foreach (var i in data)
        {
            foreach (var g in i.GroupData)
            {
                var d = g.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.CALENDAR_DATE == date)
                    .Select(x => new DeatilRank
                        {
                            MACHINE_CODE = i.MACHINE_CODE,
                            RANK = x.RANK,
                            CALENDAR_DATE = x.CALENDAR_DATE
                        })
                    .ToList();
                detail.AddRange(d);
            }
        }

        var chk = detail.Where(x => x.RANK == rank).ToList();
        if (chk.Count() > 1)
        {
            return true;
        }

        return false;
    }
    
    private double CalSaleWeek(List<PlanningDetail2> row, int index, PlanningMasterData2? plan = null)
    {
        var task = 7;
        var skip = index - task;
        if (plan == null)
        {
            var sum = row.Skip(skip).Take(task).Sum(s => !s.IsCurrent && string.IsNullOrWhiteSpace(s.DOC_TYPE) ? 0 : s.SALETOTAL);
            return sum;
        }
        else
        {
            double sum = 0;
            if (index == task)
            {
                var totalWeek = row.Skip(skip).Take(task).Sum(s => !s.IsCurrent && string.IsNullOrWhiteSpace(s.DOC_TYPE) ? 0 : s.SALETOTAL);
                sum = totalWeek - plan.SALE_LAST_WEEK;
                return sum;
            }
            else
            {
                var totalWeek = row.Skip(skip).Take(task).Sum(s => !s.IsCurrent && string.IsNullOrWhiteSpace(s.DOC_TYPE) ? 0 : s.SALETOTAL);
                var lastWeek = row.Skip(skip - task).Take(task).Sum(s => !s.IsCurrent && string.IsNullOrWhiteSpace(s.DOC_TYPE) ? 0 : s.SALETOTAL);
                sum = totalWeek -lastWeek ;
                return sum;
            }
        }
    }
}
