@using System.Reflection;
@inject IChangeProductService ChangeProductService
@inject DialogService DialogService
@inject IDialogService DialogServiceCustom

<div class="row">
    <div class="col-3">
        <p>ตู้ : @Header.MACHINE_CODE</p>
    </div>
    <div class="col-3">
        <p>รหัสสาขา : @Header.ORGANIZATION_CODE</p>
    </div>
    <div class="col-3">
        <p>ประเภทตู้ : @Header.MACHINE_TYPE</p>
    </div>
    <div class="col-3">
        <p>ชื่อประเภทตู้ : @Header.MACHINE_TYPE_NAME</p>
    </div>
</div>
<div class="row">
    <div class="col-3">
        <p>โมเดลตู้ : @Header.MACHINE_MODEL</p>
    </div>
    <div class="col-3">
        <p>ตู้ @(Header.TYPE_METER == "2" ? "1:1" : "กลุ่ม")</p>
    </div>
    <div class="col-3">
        <p>@(Header.ISONLINE == "1" ? "ออนไลน์" : "ออฟไลน์")</p>
    </div>
    <div class="col-3">
        <p>วันที่ : @Item.ChangeDate</p>
    </div>
</div>

<div class="row">
    <div class="col-1">
        <RadzenLabel Text="Filter" />
    </div>
    <div class="col-6">
        <RadzenRadioButtonList Disabled="!IsCurrent" @bind-Value=@formModel.Filter Orientation=Orientation.Horizontal TValue="string">
            <Items>
                <RadzenRadioButtonListItem Text="มากไปน้อย" Value=@("DESC") />
                <RadzenRadioButtonListItem Text="น้อยไปมาก" Value=@("ASC") />
                <RadzenRadioButtonListItem Text="กำหนดเอง" Value=@("FIXED") />
            </Items>
        </RadzenRadioButtonList>
    </div>
    <div class="col-5 d-flex justify-content-end">
        <RadzenButton 
        Click=@(()=> ShowdialogBestProductCallback.InvokeAsync(new BestProductRequest{
        Location = Item.Location ,
        Machine = Item.Machine ,
        ORG = Item.ORG }))
        Text="สินค้าขายดี"
        ButtonStyle="ButtonStyle.Primary"
        Size="ButtonSize.ExtraSmall"
        Style="text-transform: none;" />
    </div>
</div>

<div id="table-scroll" class="table-scroll mb-2" style=@(!IsCurrent ? "height:23rem;" : null)>
    <table class="table table-sm " ondragover="event.preventDefault();">
        <thead>
            <tr>
                @if (IsCurrent)
                {
                    <th class="text-center" style="font-size: 12px;z-index:1;">
                        <RadzenButton Click="()=> AddRowGrpup()"
                                      Icon="add"
                                      ButtonStyle="ButtonStyle.Primary"
                                      Size="ButtonSize.ExtraSmall"
                                      Disabled=@(selectRowGroup != null && selectRowGroupProduct != null)
                                      Style="text-transform: none;width:4.5rem;" />
                    </th>
                }
                <th style="font-size: 12px;">ช่องสินค้า</th>
                <th style="font-size: 12px;">กลุ่มราคาขาย</th>
                <th style="font-size: 12px;">ราคาเรียกเก็บ</th>
                <th style="font-size: 12px;">ราคาตามสัญญา</th>
                <th style="font-size: 12px;">ประเภทกลุ่มสินค้า</th>
                <th style="font-size: 12px;">ชื่อสินค้า</th>
                <th style="font-size: 12px;">ต้นทุน</th>
                <th style="font-size: 12px;">GP รายสินค้า</th>
                <th style="font-size: 12px;">GP ยอดขาย </th>
                <th style="font-size: 12px;z-index:1;">ยอดขายเฉลี่ย</th>
                <th style="font-size: 12px;z-index:1;">ยอดโหลด</th>
                <th style="font-size: 12px;z-index:1;">ราคาขายหน้าตู้</th>
                <th style="font-size: 12px;">กลุ่มราคาเดิม</th>
                @if (IsCurrent)
                {
                    <th style="font-size: 12px;z-index:1;">เปลี่ยนกลุ่มราคาขาย</th>
                    <th style="font-size: 12px;z-index:1;" colspan="2"></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var (i, index) in Data!.WithIndex())
            {
                var rawProductName = product.Find(x => x.RAWPRODUCTCODE == (i.Products.Count() != 0 ? i.Products[0].RAWPRODUCTCODE : ""));
                var rowSpan = i.Products.Count();
                var trClassColor = i.IsAddSlot ? "table-success" :
                i.SlotStatus ? "table-secondary" : null;
                @* index % 2 != 1 ? "table-primary" : null; *@
                var tdClassColor = i.Products[0].IsAddSlot ? "grp-color-new" : i.Products[0].IsStatusChange ? "grp-color-change" : !i.Products[0].SLOTSTATUS ? "grp-color-off" : null;
                var disableMove = selectRowGroup != null && selectRowGroupProduct != null;
                var option = optionsSlot.Where(x => x != i.SLOT_REALPRICE);

                <tr role="button" draggable="@(formModel.Filter == "FIXED" ? "true" : "false")" @ondrop="@(()=> Drop(i))" @ondrag="@(e => StartDrag(i))" class=@($"{trClassColor}")>
                    @if (IsCurrent)
                    {
                        <td style="width:5rem" rowspan=@rowSpan>
                            <div class="row gy-2 justify-content-center">
                                <RadzenButton Click=@(() => OnOpenRowGroup(i , i.IsAddSlot))
                                              Text=@(i.IsAddSlot || i.IsEmptySlot ? "del" : i.SlotStatus ? "on" : "off")
                                              ButtonStyle=@(i.SlotStatus ? ButtonStyle.Success : ButtonStyle.Danger)
                                              Size="ButtonSize.ExtraSmall"
                                              Style="text-transform: none;width:4.5rem;"
                                              Disabled=@(selectRowGroup != null && selectRowGroupProduct != null || i.IsAddSlot && !i.IsEmptySlot) />
                                <RadzenButton Click=@(()=> AddNewProductGroup(i,index))
                                              Text="เพิ่มสินค้า"
                                              ButtonStyle="ButtonStyle.Primary"
                                              Size="ButtonSize.ExtraSmall"
                                              Disabled=@(selectRowGroup != null && selectRowGroupProduct != null)
                                              Style="text-transform: none;width:4.5rem;" />
                                @if (i.Products.Count() != 1)
                                {
                                    <div style="width:6rem">
                                        <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                        TValue="double?"
                                        @bind-Value=@i.Products[0].Move
                                                        Data=@option
                                                        Change="@(val => onChangeSlotGroup((double)val , i))"
                                                        Disabled=@(i.IsEmptySlot) />
                                    </div>
                                }
                            </div>
                        </td>
                    }
                    
                    <td style="width:2rem" rowspan=@rowSpan>@i.SLOT_NO</td>
                    <td style="width:2rem" rowspan=@rowSpan>
                        @i.SLOT_REALPRICE
                    </td>

                    <td class=@($"{tdClassColor}") rowspan=@rowSpan style="width:2rem">
                        @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SLOT_INSTALLPRICE : "")
                    </td>

                    <td class=@($"{tdClassColor}") rowspan=@rowSpan style="width:2rem">
                        @* @i.IsEmptySlot
                    @i.Products[0].STATUSCHANGE
                    @i.Products[0].IsStatusChange
                    @i.Products[0].IsSave *@
                        @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SLOT_CONTRACT_PRICE : "")
                    </td>
                    <td class=@($"{tdClassColor}") style="width:10rem">
                        @if (selectRowGroup == index && selectRowGroupProduct == 0)
                        {
                            
                            <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                            TValue="string"
                                            Data=@product
                                            TextProperty="RAWPRODUCTNAME"
                                            ValueProperty="RAWPRODUCTCODE"
                            @bind-Value=@i.Products[0].RAWPRODUCTCODE
                                            Change="@(args => OnChangeRawProduct(args))" />
                        }
                        else
                        {
                            @(rawProductName != null ? rawProductName.RAWPRODUCTNAME : "")
                        }
                    </td>
                    <td class=@($"{tdClassColor}")>
                        @if (selectRowGroup == index && selectRowGroupProduct == 0)
                        {
                            <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                            FilterOperator="StringFilterOperator.StartsWith"
                                            AllowFiltering="true"
                                            TValue="string"
                                            Data=@optionProducts
                                            TextProperty="PRODUCTNAME"
                                            ValueProperty="PRODUCTCODE"
                            @bind-Value=@i.Products[0].PRODUCT_CODE
                                            Change="@(args => OnChangeProductGroup(args , index , 0))" />
                        }
                        else
                        {
                            @(i.Products.Count() != 0 ? i.Products[0].PRODUCT_NAME : "")
                        }
                    </td>
                    @{
                        var gp = (double)(((i.SLOT_INSTALLPRICE - i.Products[0].COSTSALEPRICE) / i.Products[0].COSTSALEPRICE) * 100)!;
                    }
                    <td class=@($"{tdClassColor}") style="width:3rem">@(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].COSTSALEPRICE : "")</td>
                    <td class=@($"{tdClassColor}") style="width:3rem">@(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? $"{gp.ToStringNumberFormat2()}%" : "")</td>
                    <td class=@($"{tdClassColor}") style="width:3rem">@(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? $"24%" : "")</td>
                    <td class=@($"{tdClassColor}") style="width:3rem">@(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SALETOTAL : "")</td>
                    <td class=@($"{tdClassColor}") style="width:3rem">
                        @if (selectRowGroup == index && selectRowGroupProduct == 0 && !i.IsEmptySlot)
                        {
                            var validat = OnValidateInputLoadin(i.Products[0].LOADIN, i.SLOT_NO, false) ? "validat" : null;
                            <RadzenNumeric class=@($"text-size {validat}")
                                           ShowUpDown="false"
                                           TextAlign="TextAlign.End"
                                           TValue="int"
                            @bind-Value=@i.Products[0].LOADIN
                            @oninput=@(args => OnChangeInputLoadin(args , i.Products[0] ,"LOADIN")) />
                        }
                        else
                        {
                            @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].LOADIN : "")
                        }
                    </td>
                    <td class=@($"{tdClassColor}") style="width:3rem">
                        @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SALEPRICE : "")
                    </td>

                    <td class=@($"{tdClassColor}") style="width:2rem">
                        @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SlotRealPriceOld : "")
                    </td>
                   
                    @if (IsCurrent)
                    {
                        <td class=@($"{tdClassColor}") style="width:4.5rem">
                            <div style="width:4rem">
                               
                                 @if (!i.IsEmptySlot && i.Products[0].SLOTSTATUS)
                                {
                                    <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                    TValue="double?"
                                    @bind-Value=@i.Products[0].Move
                                                    Data=@option
                                                    Change="@(val => OnChangeSlot((double)val , i.Products[0] , i))"
                                                    Disabled=@disableMove />
                                }
                            </div>
                        </td>
                        <td class=@($"{tdClassColor} text-center") style="width:6rem">
                            <div>
                                @if (!i.IsEmptySlot && i.Products[0].SLOTSTATUS)
                                {
                                    if (selectRowGroup == index && selectRowGroupProduct == 0)
                                    {
                                        <RadzenButton Click=@(() => OnSaveChange(i , i.Products[0]))
                                                      Text="บันทึก"
                                                      ButtonStyle="ButtonStyle.Primary"
                                                      Size="ButtonSize.ExtraSmall"
                                                      Disabled=@(DisableBtnSave(i,0)) />
                                    }
                                }

                                @if (!i.IsEmptySlot)
                                {
                                    @RenderButtonDeleteChange(i.Products.Count() != 0 ? i.Products[0] : null , index , 0)
                                }
                            </div>
                        </td>
                    }
                </tr>

                // แถว2
                @foreach (var (d, idx) in i.Products.Skip(1).WithIndex())
                {
                    var rawProductName2 = product.Find(x => x.RAWPRODUCTCODE == d.RAWPRODUCTCODE);
                    var trClassColorDetail = d.IsAddSlot ? "table-success" : trClassColor;
                    var tdClassColorDetail = d.IsAddSlot ? "grp-color-new" : d.IsStatusChange ? "grp-color-change" : !d.SLOTSTATUS ? "grp-color-off" : null;

                    var gpDt = (double)(((d.SLOT_INSTALLPRICE - d.COSTSALEPRICE) / d.COSTSALEPRICE) * 100)!;

                    <tr role="button" draggable="@(formModel.Filter == "FIXED" ? "true" : "false")" @ondrop="@(()=> Drop(i))" @ondrag="@(e => StartDrag(i))" class=@($"{trClassColorDetail}")>
                       
                        @* <td class=@($"{tdClassColorDetail}") style="width:2rem">
                            @if (selectRowGroup == index && selectRowGroupProduct == idx + 1)
                            {
                                var validat = OnValidateInputLoadin(d!.SLOT_INSTALLPRICE, i.SLOT_NO, false) ? "validat" : null;
                                <RadzenNumeric class=@($"text-size {validat}")
                                               ShowUpDown="false"
                                               TextAlign="TextAlign.End"
                                               TValue="double"
                                               @bind-Value=@d.SLOT_INSTALLPRICE
                                               @oninput=@(args => OnChangeInputLoadin(args , d ,"SLOT_INSTALLPRICE")) />
                            }
                            else
                            {
                                @(d != null ? d.SLOT_INSTALLPRICE : "")
                            }
                        </td>
                        <td class=@($"{tdClassColorDetail}") style="width:2rem"> @(d != null ? d.SLOT_CONTRACT_PRICE : "")</td> *@
                        <td class=@($"{tdClassColorDetail}")>
                            @if (selectRowGroup == index && selectRowGroupProduct == idx + 1)
                            {
                                <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                TValue="string"
                                                Data=@product
                                                TextProperty="RAWPRODUCTNAME"
                                                ValueProperty="RAWPRODUCTCODE"
                                @bind-Value=@d!.RAWPRODUCTCODE
                                                Change="@(args => OnChangeRawProduct(args))" />
                            }
                            else
                            {
                                @(rawProductName2 != null ? rawProductName2!.RAWPRODUCTNAME : "")
                            }
                        </td>
                        <td class=@($"{tdClassColorDetail}")>
                            @if (selectRowGroup == index && selectRowGroupProduct == idx + 1)
                            {
                                <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.StartsWith"
                                                AllowFiltering="true"
                                                TValue="string"
                                                Data=@optionProducts
                                                TextProperty="PRODUCTNAME"
                                                ValueProperty="PRODUCTCODE"
                                @bind-Value=@i.Products[idx + 1].PRODUCT_CODE
                                                Change="@(args => OnChangeProductGroup(args , index , idx +1))" />
                            }
                            else
                            {
                                @(d != null ? d.PRODUCT_NAME : "")
                            }
                        </td>
                        <td class=@($"{tdClassColorDetail}")>@(d != null ? d.COSTSALEPRICE : 0)</td>
                        <td class=@($"{tdClassColorDetail}")>@(d != null ? $"{gpDt.ToStringNumberFormat2()}%" : 0)</td>
                        <td class=@($"{tdClassColorDetail}")>@(d != null ? $"24.5%" : 0)</td>
                        <td class=@($"{tdClassColorDetail}")>@(d != null ? d.SALETOTAL : 0)</td>
                        <td class=@($"{tdClassColorDetail}")>
                            @if (selectRowGroup == index && selectRowGroupProduct == idx + 1)
                            {
                                var validat = OnValidateInputLoadin(d!.LOADIN, i.SLOT_NO, false) ? "validat" : null;
                                <RadzenNumeric class=@($"text-size {validat}")
                                               ShowUpDown="false"
                                               TextAlign="TextAlign.End"
                                               TValue="int"
                                @bind-Value=@d.LOADIN
                                @oninput=@(args => OnChangeInputLoadin(args , d ,"LOADIN")) />
                            }
                            else
                            {
                                @(d != null ? d.LOADIN : "")
                            }
                        </td>
                        <td class=@($"{tdClassColorDetail}")>

                            @(d != null ? d.SALEPRICE : "")
                        </td>
                        <td class=@($"{tdClassColorDetail}") style="width:2rem"> @(d != null ? d.SlotRealPriceOld : "")</td>
                        @if (IsCurrent)
                        {
                            <td class=@($"{tdClassColorDetail}") style="width:4.5rem">
                                @{
                                    var disableMove2 = selectRowGroup != null && selectRowGroupProduct != null || !d!.SLOTSTATUS;
                                }

                                @if (d!.SLOTSTATUS && !d.STATUSCHANGE || d.IsSave)
                                {
                                    <div style="width:4rem">
                                        <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                        TValue="double?"
                                        @bind-Value=@d!.Move
                                                        Data=@option
                                                        Change="@(val => OnChangeSlot((double)val , d! , i))"
                                                        Disabled=@disableMove2 />
                                    </div>
                                }
                            </td>
                            <td class=@($"{tdClassColorDetail} text-center") style="width:5rem">
                                <div>
                                    @if (selectRowGroup == index && selectRowGroupProduct == idx + 1)
                                    {
                                        <RadzenButton Click=@(() => OnSaveChange(i , d))
                                                      Text="บันทึก"
                                                      ButtonStyle="ButtonStyle.Primary"
                                                      Size="ButtonSize.ExtraSmall"
                                                      Disabled=@(DisableBtnSave(i,idx + 1)) />
                                    }
                                    @RenderButtonDeleteChange(d , index , idx + 1)
                                </div>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
    @if (IsCurrent)
    {
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton Click="()=> SaveChangeProduct(0)"
                          Text="บันทึก"
                          Style="width: 80px;text-transform: none;"
                          Disabled=@(selectRowGroup != null && selectRowGroupProduct != null) />
            <RadzenButton Shade="Shade.Lighter"
                          ButtonStyle="ButtonStyle.Light"
                          Click="()=> SaveChangeProduct(1)"
                          Text="ยกเลิกการเปลี่ยนสินค้า"
                          Style="width: 200px;text-transform: none;"
                          Disabled=@(selectRowGroup != null && selectRowGroupProduct != null) />
        </RadzenStack>

        <div class="chp-wrap-sum">
            <div class="chp-in-wrap-sum">
                <RadzenStack Orientation="Orientation.Vertical">
                    <RadzenText class="m-0">
                        @($"GP เฉลี่ยรายสินค้า : {AgvGPDefult.ToStringNumberFormat()}%")
                    </RadzenText>
                    <RadzenText>
                        @($"GP เฉลี่ยยอดขาย : 40%")
                    </RadzenText>

                </RadzenStack>

                <RadzenStack Orientation="Orientation.Vertical">
                    @{
                        var textColor = AgvGPDefult == CalAgvGP() ? "#00800008" : "green";
                    }
                    <RadzenText class="m-0" Style=@($"color:{textColor};")>
                        @($"New GP เฉลี่ยรายสินค้า : {CalAgvGP().ToStringNumberFormat()}%")
                    </RadzenText>

                    <RadzenText Style=@($"color:{textColor};")>
                        @($"New GP เฉลี่ยยอดขาย : 33%")
                    </RadzenText>
                </RadzenStack>
            </div>
        </div>

        <RadzenButton Text="ปิด" Click="(() => DialogService.Close(false))" ButtonStyle="ButtonStyle.Light" Style="text-transform: none;" />
    }
</RadzenStack>

    @code {
    #region Parameter
    [Parameter]
    public ChangeProductRequest Item { get; set; } = new();
    [Parameter]
    public bool IsCurrent { get; set; }
    [Parameter]
    public ChangeProductHeader Header { get; set; } = new();
    [Parameter]
    public List<ChangeProductGroup>? Data { get; set; } 
    [Parameter]
    public EventCallback<BestProductRequest> ShowdialogBestProductCallback { get; set; }
    #endregion

    #region Data State 
    class FormModel
    {
        public int SlotRealPrice { get; set; }
        public string Filter { get; set; } = string.Empty ;
    }

    int currentIndex;
    int targetRealPrice = 0;
    int? selectRowGroup = null;
    int? selectRowGroupProduct = null;
    public double AgvGPDefult;

    List<double> optionsSlot = new();
    List<Rawproduct> product = new();
    // List<ChangeProductGroup> data = new();
    FormModel formModel = new();
    CompareOperator compareOperator = CompareOperator.NotEqual;
    List<RawproductDetail2> optionProducts = new();
    #endregion

    #region Load data
    protected override async Task OnInitializedAsync()
    {

        await LoadDataChangeProduct();

    }

    protected override void OnParametersSet()
    {
        if(Data is not null)
        {
            Data = Data.FilterGroup(formModel.Filter);
            optionsSlot = Data.Select(x => x.SLOT_REALPRICE).ToList();

            AgvGPDefult = CalAgvGP();
        }

        if (Header is not null)
        {
            formModel.Filter = Header.STATUS_SORT;
        }
    }

    async Task LoadDataChangeProduct()
    {
        var body = new RawproductRequest { RawProductCode = "" };
        var resProduct = await ChangeProductService.GetRawproduct(body);
        if (resProduct.ErrorMessage == "success")
        {
            product = resProduct.Data;
            
        }

       

        StateHasChanged();
    }
    #endregion

    #region Add New RealPrice
    async Task AddRowGrpup()
    {
        var result = await DialogService.OpenAsync("ตั้งราคาขาย", ds =>
        @<div class="row">
            <div>
                <RadzenTemplateForm TItem="FormModel" Data=@formModel Submit=@OnSubmit>
                    <div class="row mb-3">
                        <div class="col-6">
                            <RadzenLabel Text="กลุ่มราคาขาย" />
                        </div>
                        <div>
                            <RadzenNumeric ShowUpDown="false" style="display: block" Name="SlotRealPrice" @bind-Value=@formModel.SlotRealPrice TValue="int" class="w-100" />
                        <RadzenCompareValidator Value=@targetRealPrice Component="SlotRealPrice" Text="ไม่สามารถกำหนดราคาขายเป็น 0 ได้!" Operator=@compareOperator />
                            <RadzenCustomValidator Component="SlotRealPrice" Validator="@(() => ValidateRealPrice(formModel.SlotRealPrice))" Text="กลุ่มราคาขายนี้มีอยู่เเล้ว!" />
                        </div>
                    </div>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <RadzenStack Orientation="Orientation.Horizontal">
                            <RadzenButton ButtonType="ButtonType.Submit" Text="บันทึก" Style="width: 80px;" />
                            <RadzenButton Text="ยกเลิก" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenTemplateForm>
            </div>
        </div>
    );

        formModel = new();
    }

    void OnSubmit(FormModel model)
    {
        Data!.Add(new ChangeProductGroup
            {
                    SLOT_NO = (Data!.Count() + 1).ToString(),
                SLOT_REALPRICE = model.SlotRealPrice,
                IsAddSlot = true,
                IsEmptySlot = true,
                Products = new List<ChangeProductDetail2>()
                {
                    new ChangeProductDetail2
                    {
                        SLOT_NO = Data!.Count() + 1,
                        SLOTSTATUS = true,
                    }
                }
            });

        Data = Data!.FilterGroup(formModel.Filter);


        optionsSlot = Data!.Select(x => x.SLOT_REALPRICE).ToList();

        DialogService.Close(true);
    }

    bool ValidateRealPrice(int val)
    {
        if (val == 0) return true;
        return Data!.Find(x => x.SLOT_REALPRICE == val) == null;
    }
    #endregion

    #region Add New Product
    void AddNewProductGroup(ChangeProductGroup group, int grpIndex)
    {
        var slot = int.Parse(group.SLOT_NO);

        if (!group.IsEmptySlot)
        {
            group.Products.Add(new ChangeProductDetail2
                {
                    SLOT_NO = slot,
                    SLOTSTATUS = true,
                    IsAddSlot = true,
                    Cost = 11,
                    COSTSALEPRICE = 0
                });
        }
        else
        {
            group.IsEmptySlot = false;
            group.Products[0].IsAddSlot = true;
        }

        var last = group.Products.Last();

        selectRowGroup = grpIndex;

        selectRowGroupProduct = group.Products.FindLastIndex(x => x.SLOT_NO == slot && x.RAWPRODUCTCODE == last.RAWPRODUCTCODE && x.PRODUCT_CODE == last.PRODUCT_CODE);

        StateHasChanged();
    }
    #endregion

    #region On & Off Row
    void OffRowProduct(ChangeProductDetail2 item) => item.SLOTSTATUS = !item.SLOTSTATUS;
    #endregion

    #region On & Off Row Group
    void OnOpenRowGroup(ChangeProductGroup item, bool action)
    {
        selectRowGroup = null;
        selectRowGroupProduct = null;
        if (!item.IsEmptySlot && !action)
        {
            item.SlotStatus = !item.SlotStatus;
            foreach (var j in item.Products)
            {
                j.SLOTSTATUS = !j.SLOTSTATUS;
            }
        }
        else
        {
            Data!.Remove(item);
        }
    }
    #endregion

    #region Change Product
    void OnChangeSlot(double val, ChangeProductDetail2 item, ChangeProductGroup grp)
    {
        var slot = Data!.Find(x => x.SLOT_REALPRICE == val);
        item.Move = null;
        if (slot != null)
        {
            var s = slot.Products.Find(x => x.RAWPRODUCTCODE == item.RAWPRODUCTCODE && x.PRODUCT_CODE == item.PRODUCT_CODE);

            if (s != null)
            {
                s.IsStatusChange = false;
                s.STATUSCHANGE = false;
                s.SLOTSTATUS = true;

                grp.Products.Remove(item);
            }
            else
            {
                if (slot.IsEmptySlot)
                {
                    item.IsStatusChange = true;
                    item.STATUSCHANGE = true;
                    item.IsSave = false;
                    item.SLOTSTATUS = true;
                    item.SLOT_REALPRICE = val;
                    slot.IsEmptySlot = false;
                    slot.Products[0] = item;
                }
                else
                {
                    var copy = (ChangeProductDetail2)item.Clone();

                    copy.IsAddSlot = false;
                    copy.IsStatusChange = true;
                    copy.STATUSCHANGE = true;
                    copy.SLOT_REALPRICE = val;
                    copy.LOADIN = item.LOADIN;
                    copy.IsSave = false;
                    copy.Cost = item.Cost;
                    copy.COSTSALEPRICE = item.COSTSALEPRICE;

                    copy.SLOT_INSTALLPRICE = slot.SLOT_REALPRICE;
                    copy.SLOT_CONTRACT_PRICE = slot.SLOT_REALPRICE;

                    item.SLOTSTATUS = false;
                    item.IsCopy = true;

                    slot.Products.Add(copy);
                }

                if (grp.Products.Count() > 1)
                {
                    grp.Products.Remove(item);
                }
                else
                {
                    grp.Products = new List<ChangeProductDetail2>
                                {
                            new ChangeProductDetail2
                            {
                                SLOT_NO = int.Parse(grp.SLOT_NO) ,
                                SLOTSTATUS = true
                            }
                                };
                    grp.IsEmptySlot = true;
                }
            }
        }
    }
    #endregion

    #region Change Product Group
    void onChangeSlotGroup(double val, ChangeProductGroup grp)
    {
        var slot = Data!.Find(x => x.SLOT_REALPRICE == val);

        if (slot != null)
        {
            foreach (var prd in grp.Products)
            {
                prd.Move = null;
                prd.IsStatusChange = true;
                prd.STATUSCHANGE = true;
                prd.IsSave = false;
                prd.SLOT_REALPRICE = val;
                prd.SlotRealPriceOld = grp.SLOT_REALPRICE;
                prd.SLOT_CONTRACT_PRICE= grp.SLOT_REALPRICE;
                prd.SLOT_INSTALLPRICE = grp.SLOT_REALPRICE;

                slot.Products.Add(prd);
            }

            grp.Products = new List<ChangeProductDetail2> {
                new ChangeProductDetail2
                {
                    SLOT_NO = int.Parse(grp.SLOT_NO) ,
                    SLOTSTATUS = true,
                    SLOT_REALPRICE = grp.SLOT_REALPRICE,
                    COSTSALEPRICE = 0,
                    Cost =0
                }
            };
            grp.IsEmptySlot = true;
        }
    }
    #endregion

    #region Delete Product
    void DeleteProduct(ChangeProductDetail2 item, int index)
    {
        var grp = Data![index];

        var slot = Data.Find(x => x.SLOT_REALPRICE == item.SlotRealPriceInit && x.SLOT_REALPRICE != grp.SLOT_REALPRICE);

        if (grp.Products.Count() == 1)
        {
            grp.Products[0] = new ChangeProductDetail2
                    {
                        SLOT_NO = item.SLOT_NO,
                        SLOTSTATUS = false
                    };
            grp.IsEmptySlot = true;
        }
        else
        {
            grp.Products.Remove(item);
        }

        if (slot != null)
        {
           

            if (grp.IsAddSlot)
            {
                if (slot.Products.Count() == 1 && slot.IsEmptySlot)
                {
                    slot.IsEmptySlot = false;
                    slot.Products[0].IsAddSlot = false;
                    slot.Products[0].IsStatusChange = false;
                    slot.Products[0].STATUSCHANGE = false;
                    slot.Products[0].SLOT_REALPRICE = item.SLOT_REALPRICE;
                    slot.Products[0].SlotRealPriceOld = item.SlotRealPriceInit;
                    slot.Products[0].RAWPRODUCTCODE = item.RAWPRODUCTCODE;
                    slot.Products[0].PRODUCT_NAME = item.PRODUCT_NAME;
                    slot.Products[0].PRODUCT_CODE = item.PRODUCT_CODE;
                    slot.Products[0].SALETOTAL = item.SALETOTAL;
                    slot.Products[0].SALEPRICE = item.SALEPRICE;
                }
                else
                {
                    item.IsAddSlot = false;
                    item.IsStatusChange = false;
                    item.STATUSCHANGE = false;
                    // item.SLOTSTATUS = true;
                    slot.Products.Add(item);
                }


                // if (grp.Products.Count() == 1)
                // {
                //     grp.Products[0] = new ChangeProductDetail2
                //             {
                //                 SLOT_NO = item.SLOT_NO,
                //                 SLOTSTATUS = true
                //             };
                //     grp.IsEmptySlot = true;
                // }
                // else
                // {
                //     grp.Products.Remove(item);
                // }
            }
            else
            {
                item.IsAddSlot = false;
                item.IsStatusChange = false;
                item.STATUSCHANGE = false;
                if (slot.SLOT_REALPRICE == item.SlotRealPriceInit && !item.IsAddSlot)
                {
                    item.IsSave = true;
                }

                if (!slot.IsEmptySlot)
                {
                    slot.Products.Add(item);
                    // grp.Products.Remove(item);
                }
                else
                {
                    slot.IsEmptySlot = false;
                    slot.Products[0].IsSave = item.IsSave;
                    slot.Products[0].IsAddSlot = item.IsAddSlot;
                    slot.Products[0].IsStatusChange = item.IsStatusChange;
                    slot.Products[0].STATUSCHANGE = item.STATUSCHANGE;
                    slot.Products[0].SLOT_REALPRICE = slot.SLOT_REALPRICE;
                    slot.Products[0].SlotRealPriceOld = item.SlotRealPriceInit;
                    slot.Products[0].SlotRealPriceInit = item.SlotRealPriceInit;
                    slot.Products[0].RAWPRODUCTCODE = item.RAWPRODUCTCODE;
                    slot.Products[0].PRODUCT_NAME = item.PRODUCT_NAME;
                    slot.Products[0].PRODUCT_CODE = item.PRODUCT_CODE;
                    slot.Products[0].SALETOTAL = item.SALETOTAL;
                    slot.Products[0].SALEPRICE = item.SALEPRICE;
                }
            }
        }
        // else
        // {
        //     if (grp.Products.Count() == 1)
        //     {
        //         grp.Products[0] = new ChangeProductDetail2
        //                 {
        //                     SLOT_NO = item.SLOT_NO,
        //                     SLOTSTATUS = true
        //                 };
        //         grp.IsEmptySlot = true;
        //     }
        //     else
        //     {
        //         grp.Products.Remove(item);
        //     }
        // }
        selectRowGroup = null;
        selectRowGroupProduct = null;
    }
    #endregion

    #region Drag & Drop Row Table
    private void StartDrag(ChangeProductGroup item)
    {
        currentIndex = GetIndex(item);
    }

    private int GetIndex(ChangeProductGroup item)
    {
        return Data!.FindIndex(x => x.SLOT_NO == item.SLOT_NO);
    }

    private void Drop(ChangeProductGroup item)
    {
        if (item != null)
        {
            var index = GetIndex(item);

            var current = Data![currentIndex];

            Data!.RemoveAt(currentIndex);

            Data!.Insert(index, current);

            StateHasChanged();
        }
    }
    #endregion

    #region Save Change Product
    async Task OnSaveChange(ChangeProductGroup grp, ChangeProductDetail2 item)
    {
        List<ChangeProductDetail2> prd = new();
        #region หาสินค้าที่มีอยู่
        foreach (var g in Data!)
        {
            foreach (var p in g.Products)
            {
                prd.Add(p);
            }
        }
        var prdInSlot = prd.Find(x => x.PRODUCT_CODE == item.PRODUCT_CODE && x.SLOT_REALPRICE != grp.SLOT_REALPRICE);
        #endregion

        #region confirm dialog
        string msg = "";
        if (prdInSlot != null)
        {
            msg = $"พบสินค้า {prdInSlot.PRODUCT_NAME} อยู่ในกลุ่มราคาขาย {prdInSlot.SLOT_REALPRICE} ต้องการทำรายการต่อหรือไม่?";
        }
        var result = await DialogConfirmChange(prdInSlot != null ? "ยืนยันการเปลี่ยนสินค้า" : "ยืนยันการเพิ่มสินค้า", msg);
        #endregion

        #region กดยืนยันการเปลี่ยนสินค้าหรือไม่
        if (!result)
        {
            #region ช่องสินค้าว่างหรือไม่
            if (grp.Products.Count() > 1)
            {
                grp.Products.Remove(item);
            }
            else
            {
                grp.Products = new List<ChangeProductDetail2>
                    {
                    new ChangeProductDetail2
                    {
                        SLOT_NO = int.Parse(grp.SLOT_NO) ,
                        SLOTSTATUS = true
                    }
                    };
                grp.IsEmptySlot = true;
            }
            #endregion
        }
        else
        {
            #region เจอสินค้าในช่องอื่น
            if (prdInSlot != null)
            {
                var g = Data!.Find(x => x.SLOT_REALPRICE == prdInSlot.SLOT_REALPRICE);

                if (g!.Products.Count > 1)
                {
                    g.Products.Remove(prdInSlot);
                }
                else
                {
                    g.Products = new List<ChangeProductDetail2>()
                        {
                        new ChangeProductDetail2
                        {
                            SLOT_NO = int.Parse(g.SLOT_NO),
                            SLOTSTATUS = true,
                            IsAddSlot = false,
                        }
                        };
                    g.IsEmptySlot = true;
                }
            }
            #endregion
        }
        #endregion
        selectRowGroup = null;
        selectRowGroupProduct = null;

        StateHasChanged();
    }
    private async Task<bool> DialogConfirmChange(string title = "", string message = "")
    {
        bool result = await DialogService.OpenAsync(title, ds =>
        @<RadzenStack Gap="1.5rem">
            @message
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="เปลี่ยนสินค้า" Click="() => ds.Close(true)" Style="width: 80px;" />
                    <RadzenButton Text="ยกเลิก" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    );

        return result;
    }
    #endregion

    #region Save Change Product To DataBase
    async Task SaveChangeProduct(int cancel)
    {
        List<SaveChangeProductData> prod = new();

        foreach (var item in Data!)
        {
            foreach (var prd in item.Products)
            {
                var status = prd.IsAddSlot ? "2" : prd.STATUSCHANGE ? "1" : "0";
                prod.Add(new SaveChangeProductData
                        {
                            MACHINE_CODE = Header.MACHINE_CODE,
                            RAWPRODUCTCODE = prd.RAWPRODUCTCODE,
                            PRODUCT_CODE = prd.PRODUCT_CODE,
                            PRODUCT_NAME = prd.PRODUCT_NAME,
                            SLOT_NO = item.SLOT_NO.ToString(),
                            SLOT_INSTALLPRICE = prd.SLOT_INSTALLPRICE.ToString(),
                            SLOT_REALPRICE = prd.SLOT_REALPRICE == 0 ? item.SLOT_REALPRICE.ToString() : prd.SLOT_REALPRICE.ToString(),
                            SLOT_CONTRACT_PRICE = prd.SLOT_CONTRACT_PRICE.ToString(),
                            SLOTSTATUS = prd.SLOTSTATUS ? "1" : "0",
                            LOADIN = prd.LOADIN.ToString(),
                            STATUSCHANGE = status
                        });
            }
        }

        var response = await ChangeProductService.SaveChangeProduct(new SaveChangeProductRequest
                {
                    ORG = Item.ORG,
                    Location = Item.Location,
                    Machine = Item.Machine,
                    ChangeDate = Item.ChangeDate,
                    Cancel = cancel.ToString(),
                    Data = prod
                });
        if (response.ErrorMessage == "success")
        {
            await DialogLoading();
        }
    }
    #endregion
   
    #region Event DropDown RAW Product
    async Task OnChangeRawProduct(object args)
    {
        var body = new RawproductDetail2Request
                {
                    RawProductCode = $"{args}",
                    ORG = Item.ORG,
                    Location = Item.Location,
                    Machine = Item.Machine
                };
        var res = await ChangeProductService.GetRawproductDetail2(body);
        optionProducts = res.Data;
        StateHasChanged();
    }
    #endregion

    #region Event DropDown Product
    void OnChangeProductGroup(object args, int index, int idx)
    {
        var prod = Data![index].Products[idx];
        var option = optionProducts.Find(x => x.PRODUCTCODE == $"{args}");
        prod.PRODUCT_NAME = option!.PRODUCTNAME;
        prod.SALETOTAL = !string.IsNullOrWhiteSpace(option!.SALETOTAL) ? option!.SALETOTAL : "0";
        prod.SALEPRICE = int.Parse(option!.SALEPRICE);
        prod.SLOT_REALPRICE = Data![index].SLOT_REALPRICE;
        prod.SlotRealPriceOld = Data![index].SLOT_REALPRICE;
        prod.SlotRealPriceInit = Data![index].SLOT_REALPRICE;
        prod.IsStatusChange = !prod.IsAddSlot ? true : false;
        prod.STATUSCHANGE = !prod.IsAddSlot ? true : false;
    }
    #endregion

    #region Event Validate Input LOADIN
    bool OnValidateInputLoadin(double val, string slot, bool isDup = true)
    {
        if (val == 0)
        {
            return true;
        }
        else if (isDup)
        {
            var fn = Data!.Find(x => x.SLOT_REALPRICE == val && x.SLOT_NO != slot);
            if (fn != null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    #endregion

    #region Event Disable Btn Save
    bool DisableBtnSave(ChangeProductGroup item, int index = 0) => item.Products[index].PRODUCT_CODE == "" || item.Products[index].RAWPRODUCTCODE == "" ? true :
    OnValidateInputLoadin(item.SLOT_REALPRICE, item.SLOT_NO) || OnValidateInputLoadin(item.Products[index].LOADIN, item.SLOT_NO, false) || OnValidateInputLoadin(item.Products[index].SLOT_INSTALLPRICE, item.SLOT_NO, false);
    #endregion

    #region Event Input LOADIN Change Value
    void OnChangeInputLoadin(ChangeEventArgs arg, ChangeProductDetail2 item, string field)
    {
        var str = $"{arg.Value}";
        var value = !string.IsNullOrEmpty(str) ? int.Parse(str) : 0;
        Type type = typeof(ChangeProductDetail2);
        ChangeProductDetail2 obj = item;
        PropertyInfo objField = type.GetProperty(field)!;
        objField.SetValue(obj, value);
    }
    #endregion
    
    #region Dialog Loading
    async Task DialogLoading()
    {
        var task = InvokeAsync(async () =>
        {
            await LoadDataChangeProduct();
            await Task.Delay(1500);
            DialogServiceCustom.DialogClose();
        });
        await DialogServiceCustom.BusyDialog("กำลังบันทึกข้อมูลดข้อมูล...");
    }
    #endregion

    #region Render Component
    RenderFragment RenderButtonDeleteChange(ChangeProductDetail2? item, int index, int idx)
    {
        var disble1 = selectRowGroup != null && selectRowGroupProduct != null ? !(selectRowGroup == index && selectRowGroupProduct == idx) : false;
        RenderFragment content =
        @<RadzenButton Click=@(() => DeleteProduct(item! , index))
                  Icon="delete_forever"
                  ButtonStyle="ButtonStyle.Danger"
                  Size="ButtonSize.ExtraSmall"
                  Disabled=@disble1 />;

        if (item!.SlotRealPriceInit == item.SLOT_REALPRICE || !item.IsAddSlot && item.IsSave)
        {
            var disable2 = selectRowGroup != null && selectRowGroupProduct != null;
            content = @<RadzenButton Click=@(() => OffRowProduct(item!))
                  Text=@(item.SLOTSTATUS ? "off" : "on")
                  ButtonStyle=@(item.SLOTSTATUS ? ButtonStyle.Danger : ButtonStyle.Success)
                  Style="text-transform: none;"
                  Size="ButtonSize.ExtraSmall"
                  Disabled=@disable2 />
    ;
        }
        return content;
    }
    #endregion

    private double CalAgvGP()
    {
        var data = Data!.Where(x => !x.IsEmptySlot).Select(x => new
        {
            // SumPrice = x.Products.Count() * x.SLOT_INSTALLPRICE,
            SumPrice = x.Products.Where(p => p.SLOTSTATUS).Sum(p => p.SLOT_INSTALLPRICE),
            SumCost = x.Products.Where(p => p.SLOTSTATUS).Sum(p => p.COSTSALEPRICE)
        });

        var price = data.Sum(x => x.SumPrice);
        var cost = data.Sum(x => x.SumCost);

        var gpAgv = (double)(((price - cost) / cost) * 100)!;

        return gpAgv;
    }
}
