@using System.Reflection;
@using Newtonsoft.Json;
<div class="row">
    <div class="col-3">
        <p>ตู้ : @header.MACHINE_CODE</p>
    </div>
    <div class="col-3">
        <p>รหัสสาขา : @header.ORGANIZATION_CODE</p>
    </div>
    <div class="col-3">
        <p>ประเภทตู้ : @header.MACHINE_TYPE</p>
    </div>
    <div class="col-3">
        <p>ชื่อประเภทตู้ : @header.MACHINE_TYPE_NAME</p>
    </div>
</div>
<div class="row">
    <div class="col-3">
        <p>โมเดลตู้ : @header.MACHINE_MODEL</p>
    </div>
    <div class="col-3">
        <p>ตู้ @(header.TYPE_METER == "2" ? "1:1" : "กลุ่ม")</p>
    </div>
    <div class="col-3">
        <p>@(header.ISONLINE == "1" ? "ออนไลน์" : "ออฟไลน์")</p>
    </div>
    <div class="col-3">
        <p>วันที่ : @Item.ChangeDate</p>
    </div>
</div>
@if (header.TYPE_METER != "2")
{
    <div class="row">
        <div class="col-1">
            <RadzenLabel Text="Filter" />
        </div>
        <div class="col-6">
            <RadzenRadioButtonList @bind-Value=@formModel.Filter Orientation=Orientation.Horizontal TValue="int">
                <Items>
                    <RadzenRadioButtonListItem Text="มากไปน้อย" Value="1" />
                    <RadzenRadioButtonListItem Text="น้อยไปมาก" Value="2" />
                    <RadzenRadioButtonListItem Text="กำหนดเอง" Value="3" />
                </Items>
            </RadzenRadioButtonList>
        </div>
    </div>
}

<div id="table-scroll" class="table-scroll mb-2">

    @if (header.TYPE_METER == "2")
    {
        <table class="table table-hover table-sm table-bordered">
            <thead>
                <tr>
                    <th style="font-size: 12px;">ช่องสินค้า</th>
                    <th style="font-size: 12px;">ประเภทกลุ่มสินค้า</th>
                    <th style="font-size: 12px;">ชื่อสินค้า</th>
                    <th style="font-size: 12px;">ยอดโหลด</th>
                    <th style="font-size: 12px;">ยอดขายเฉลี่ย</th>
                    <th style="font-size: 12px;">ราคากลาง</th>
                    <th style="font-size: 12px;">ราคาขาย</th>
                    <th style="font-size: 12px;">ราคาเรียกเก็บ</th>
                    <th style="font-size: 12px;">ราคาตามสัญญา</th>
                    @if(IsCurrent)
                    {
                        <th style="font-size: 12px;" colspan="3"></th>
                    }
                </tr>
            </thead>
            <tbody>
                    @foreach (var (i, idx) in detail.WithIndex())
                    {
                        var tableColorRow = i.IsStatusChange && !i.STATUSCHANGE && !i.IsAddSlot ? "table-secondary text-close" :
                                            !i.IsStatusChange && i.STATUSCHANGE && i.IsAddSlot ? "table-success" :
                                            i.IsStatusChange && i.STATUSCHANGE && !i.IsAddSlot ? "table-primary" :
                                            null;
                        <tr class=@($"{tableColorRow}") >
                            <td class="text-end" style="font-size: 12px;width: 3rem;">
                                @(i.SLOT_NO == 0 ? "" : i.SLOT_NO)
                            </td>

                            @if (SelectRowEdit == idx)
                            {
                                <td style="width:10rem;">
                                        <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                        TValue="string"
                                                        Data=@product
                                                        TextProperty="RAWPRODUCTNAME"
                                                        ValueProperty="RAWPRODUCTCODE"
                                                        @bind-Value=@i.RAWPRODUCTCODE
                                                        Change="@(args => actionButton = false)" />
                                </td>
                                <td style="width:30rem;">
                                        <DropDownProductDt index="@idx"
                                                           ItemModal="@Item"
                                                           RawProductCode="@i.RAWPRODUCTCODE"
                                                           ProductCode="@i.PRODUCT_CODE"
                                                           SelectDetailCallback="@((args) => SelectDetail(i,args.Item1, idx))" />
                                </td>
                            <td class="text-end" style="width:3rem;font-size: 12px;">
                                @{
                                    var prd = detail[idx - 1].PRODUCT_CODE == i.PRODUCT_CODE;
                                }
                                @if(i.IsAddSlot || prd)
                                {
                                    @i.LOADIN
                                }
                                else
                                {
                                    var validat = i.LOADIN == 0 ? "validat" : null;
                                    <RadzenNumeric class=@($"text-size {validat}")
                                                   ShowUpDown="false"
                                                   TextAlign="TextAlign.End"
                                                   TValue="int"
                                                   @bind-Value=@i.LOADIN
                                                   @oninput=@(args => OnChangeNumber(args , i , "LOADIN")) />
                                }
                                </td>
                            }
                            else
                            {
                                var rawProductName = product.FirstOrDefault(x => x.RAWPRODUCTCODE == i.RAWPRODUCTCODE);
                                <td style="width:10rem;">
                                    <div style="font-size: 12px;">
                                       @*  @i.IsStatusChange
                                        @i.STATUSCHANGE
                                        @i.IsAddSlot
                                        @i.SLOTSTATUS *@
                                        @rawProductName!.RAWPRODUCTNAME
                                    </div>
                                </td>
                                <td style="width:30rem;">
                                    <div style="font-size: 12px;">
                                        @i.PRODUCT_NAME
                                    </div>
                                </td>
                                <td style="width:3rem;">
                                    <div class="text-end" style="font-size: 12px;">
                                        @i.LOADIN
                                    </div>
                                </td>
                            }
                            <td class="text-end" style="font-size: 12px;width:5rem;">@(string.IsNullOrWhiteSpace(i.SALETOTAL) ? "0" : i.SALETOTAL)</td>
                            <td class="text-end" style="font-size: 12px;width:3rem;">@i.SALEPRICE</td>

                            <td class="text-end" style="font-size: 12px;width:3rem;">
                                @if (SelectRowEdit == idx)
                                {
                                    var validat = i.SLOT_REALPRICE == 0 ? "validat" : null;
                                    <RadzenNumeric class=@($"text-size {validat}")
                                                   ShowUpDown="false"
                                                   TextAlign="TextAlign.End"
                                                   TValue="double"
                                                   @bind-Value=@i.SLOT_REALPRICE
                                                   @oninput=@(args => OnChangeNumber(args , i ,"SLOT_REALPRICE")) />
                                }
                                else
                                {
                                    @i.SLOT_REALPRICE
                                }
                            </td>

                            <td style="width:3rem;">
                                <div class="text-end" style="font-size: 12px">
                                    @if (SelectRowEdit == idx)
                                    {
                                        var validat = i.SLOT_INSTALLPRICE == 0 ? "validat" : null;
                                        <RadzenNumeric class=@($"text-size {validat}")
                                                       ShowUpDown="false"
                                                       TextAlign="TextAlign.End"
                                                       TValue="double"
                                                       @bind-Value=@i.SLOT_INSTALLPRICE
                                                       @oninput=@(args => OnChangeNumber(args , i , "SLOT_INSTALLPRICE")) />
                                    }
                                    else
                                    {
                                        @i.SLOT_INSTALLPRICE
                                    }
                                </div>
                            </td>
                            <td style="width:3rem;">
                                <div class="text-end" style="font-size: 12px;">
                                    @if (SelectRowEdit == idx)
                                    {
                                        var validat = i.SLOT_CONTRACT_PRICE == 0 ? "validat" : null;
                                        <RadzenNumeric class=@($"text-size {validat}")
                                                       ShowUpDown="false"
                                                       TextAlign="TextAlign.End"
                                                       TValue="double"
                                                       @bind-Value=@i.SLOT_CONTRACT_PRICE
                                                       @oninput=@(args => OnChangeNumber(args, i , "SLOT_CONTRACT_PRICE")) />
                                    }
                                    else
                                    {
                                        @i.SLOT_CONTRACT_PRICE
                                    }
                                </div>
                            </td>
                            @if(IsCurrent){
                            @if (i.IsStatusChange && !i.STATUSCHANGE && !i.IsAddSlot)
                            {
                                <td style="width:6.25rem;">
                                    <div ></div>
                                </td>
                                <td class="text-center" style="width:2rem;">
                                    <div >
                                        @if ((idx < detail.Count() - 1 && detail[idx + 1].SLOT_NO - i.SLOT_NO > 1 && SelectRowEdit != idx) || (FindRowLastIndex(idx, i)))
                                        {
                                            <RadzenButton Click="()=> AddSlot(idx, i)"
                                                          Icon="add"
                                                          ButtonStyle="ButtonStyle.Primary"
                                                          Size="ButtonSize.ExtraSmall" 
                                                          />
                                        }
                                    </div>
                                </td>
                                <td style="width:2rem;">
                                    <div ></div>
                                </td>
                            }
                            else
                            {
                                <td class="text-center" style="font-size: 12px;width:6.25rem;">
                                    <div class="d-flex justify-content-around" >
                                        @if (SelectRowEdit != idx)
                                        {
                                            @if (i.IsAddSlot || i.STATUSCHANGE)
                                            {
                                                <RadzenButton Click=@(() => SelectRowEdit = idx)
                                                              Text="แก้ไข"
                                                              ButtonStyle="ButtonStyle.Warning"
                                                              Size="ButtonSize.ExtraSmall"
                                                              Style="text-transform: none;"
                                                              Disabled=@(!i.SLOTSTATUS || SelectRowEdit != null) />
                                            }
                                            else
                                            {
                                                <RadzenButton Click="()=>ChangeProduct(idx , i)"
                                                              Text="เปลี่ยนสินค้า"
                                                              ButtonStyle="ButtonStyle.Secondary"
                                                              Size="ButtonSize.ExtraSmall"
                                                              Style="text-transform: none;"
                                                              Disabled=@(!i.SLOTSTATUS || SelectRowEdit != null) />
                                            }
                                        }
                                        else
                                        {
                                            var prd = detail[idx - 1].PRODUCT_CODE == i.PRODUCT_CODE;
                                            var disble = i.IsAddSlot ? i.SLOT_REALPRICE != 0 && i.SLOT_INSTALLPRICE != 0 && i.SLOT_CONTRACT_PRICE != 0 ? false : true :
                                                         prd ? i.SLOT_REALPRICE != 0 && i.SLOT_INSTALLPRICE != 0 && i.SLOT_CONTRACT_PRICE != 0 ? false : true :
                                                         i.LOADIN != 0 && i.SLOT_REALPRICE != 0 && i.SLOT_INSTALLPRICE != 0 && i.SLOT_CONTRACT_PRICE != 0 ? false : true;


                                           <RadzenButton Click="()=>SaveRowChange(i)"
                                                          Text="บันทึก"
                                                          ButtonStyle="ButtonStyle.Primary"
                                                          Size="ButtonSize.ExtraSmall"
                                                          Style="text-transform: none;"
                                                          Disabled=@(disble) />
                                        }
                                    </div>
                                </td>
                                <td class="text-center" style="font-size: 12px;width:2rem;">
                                    <div>
                                        @if ((idx < detail.Count() - 1 && detail[idx + 1].SLOT_NO - i.SLOT_NO > 1 && SelectRowEdit != idx) || FindRowLastIndex(idx, i))
                                        {
                                            <RadzenButton Click="()=> AddSlot(idx, i)"
                                                          Icon="add"
                                                          ButtonStyle="ButtonStyle.Primary"
                                                          Size="ButtonSize.ExtraSmall"
                                                           />
                                        }
                                    </div>
                                </td>
                                <td style="font-size: 12px;width:2rem;">
                                    <div >
                                    @{
                                        var delete =  i.IsSave ? false : true;
                                        var text = !i.IsSave ? "del" :
                                                   i.SLOTSTATUS ? "off" : "on";
                                    }
                                        <RadzenButton Click="()=> OptionRow(i , delete)"
                                                      Text=@(text)
                                                      Shade=@(i.IsAddSlot ? Shade.Default : Shade.Light)
                                                      ButtonStyle=@(i.SLOTSTATUS ? ButtonStyle.Danger : ButtonStyle.Success)
                                                      Size="ButtonSize.ExtraSmall"
                                                      Style="text-transform: none;"
                                                      />
                                    </div>
                                </td>
                            }
                            }
                        </tr>
                    }
            </tbody>
        </table>
    }
    else
    {
        <table class="table table-sm " ondragover="event.preventDefault();">
            <thead>
                <tr>
                    <th class="text-center" style="font-size: 12px;">
                        <RadzenButton Click="()=> AddRowGrpup()"
                                      Icon="add"
                                      ButtonStyle="ButtonStyle.Primary"
                                      Size="ButtonSize.ExtraSmall"
                                      Disabled=@(selectRowGroup != null && selectRowGroupProduct != null) 
                                      Style="text-transform: none;width:4.5rem;"
                                      />
                    </th>
                    <th style="font-size: 12px;">ช่องสินค้า</th>
                    <th style="font-size: 12px;">กลุ่มราคาขาย</th>
                    <th style="font-size: 12px;">กลุ่มราคาเดิม</th>
                    <th style="font-size: 12px;">ราคาตามสัญญา</th>
                    <th style="font-size: 12px;">ประเภทกลุ่มสินค้า</th>
                    <th style="font-size: 12px;">ชื่อสินค้า</th>
                    <th style="font-size: 12px;">ยอดขายเฉลี่ย</th>
                    <th style="font-size: 12px;">ยอดโหลด</th>
                    <th style="font-size: 12px;">ราคากลาง</th>
                    <th style="font-size: 12px;">เปลี่ยนกลุ่มราคาขาย</th>
                    <th style="font-size: 12px;" colspan="2"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var (i, index) in groupDetail.WithIndex())
                {
                    var rawProductName = product.Find(x => x.RAWPRODUCTCODE == (i.Products.Count() != 0 ? i.Products[0].RAWPRODUCTCODE : ""));
                    var rowSpan = i.Products.Count();
                    var trClassColor = i.IsAddSlot ? "table-success" :
                                       i.SlotStatus ? "table-secondary" :
                                       index % 2 != 1 ? "table-primary" : null;
                    var tdClassColor = i.Products[0].IsAddSlot ? "grp-color-new" : i.Products[0].IsStatusChange ? "grp-color-change" : !i.Products[0].SLOTSTATUS ? "grp-color-off" : null;
                    var disableMove = selectRowGroup != null && selectRowGroupProduct != null;
                    var option = optionsSlot.Where(x => x != i.SLOT_REALPRICE);
                   
                    <tr role="button" draggable="@(formModel.Filter == 3 ? "true" : "false")" @ondrop="@(()=> Drop(i))" @ondrag="@(e => StartDrag(i))" class=@($"{trClassColor}")>
                            <td style="width:5rem" rowspan=@rowSpan>
                                <div class="row gy-2 justify-content-center">
                                    <RadzenButton Click=@(() => OnOpenRowGroup(i , i.IsAddSlot))
                                              Text=@(i.IsAddSlot || i.IsEmptySlot ? "del" : i.SlotStatus ? "on" : "off")
                                              ButtonStyle=@(i.SlotStatus ? ButtonStyle.Success : ButtonStyle.Danger)
                                              Size="ButtonSize.ExtraSmall"
                                              Style="text-transform: none;width:4.5rem;"
                                              Disabled=@(selectRowGroup != null && selectRowGroupProduct != null || i.IsAddSlot && !i.IsEmptySlot) />
                                    <RadzenButton Click=@(()=> AddNewProductGroup(i,index))
                                              Text="เพิ่มสินค้า"
                                              ButtonStyle="ButtonStyle.Primary"
                                              Size="ButtonSize.ExtraSmall"
                                              Disabled=@(selectRowGroup != null && selectRowGroupProduct != null)
                                              Style="text-transform: none;width:4.5rem;" />
                                    @if(i.Products.Count() != 1)
                                    {
                                        <div style="width:6rem">
                                            <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                            TValue="double?"
                                            @bind-Value=@i.Products[0].Move
                                                            Data=@option
                                                            Change="@(val => onChangeSlotGroup((double)val , i))"
                                                            Disabled=@(i.IsEmptySlot) />
                                        </div>
                                    }
                                </div>
                            </td>
                            <td style="width:2rem" rowspan=@rowSpan>@i.SLOT_NO</td>
                            <td style="width:2rem" rowspan=@rowSpan>
                                @i.SLOT_REALPRICE
                            </td>
                            <td style="width:2rem">
                                @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SlotRealPriceOld : "")
                            </td>
                            <td class=@($"{tdClassColor}") style="width:2rem">
                                @* @i.IsEmptySlot
                                @i.Products[0].STATUSCHANGE
                                @i.Products[0].IsStatusChange
                                @i.Products[0].IsSave *@
                                @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SLOT_CONTRACT_PRICE : "")
                            </td>
                            <td class=@($"{tdClassColor}") style="width:10rem">
                            @if (selectRowGroup == index && selectRowGroupProduct == 0 )
                                {
                                    <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                    TValue="string"
                                                    Data=@product
                                                    TextProperty="RAWPRODUCTNAME"
                                                    ValueProperty="RAWPRODUCTCODE"
                                                    @bind-Value=@i.Products[0].RAWPRODUCTCODE
                                                    Change="@(args => OnChangeRawProduct(args))" />
                                } 
                                else
                                {
                                    @(rawProductName != null ? rawProductName.RAWPRODUCTNAME : "")
                                }
                            </td>
                            <td class=@($"{tdClassColor}")>
                                @if(selectRowGroup == index && selectRowGroupProduct == 0 )
                                {
                                    <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                FilterOperator="StringFilterOperator.StartsWith"
                                                AllowFiltering="true"
                                                TValue="string"
                                                Data=@optionProducts
                                                TextProperty="PRODUCTNAME"
                                                ValueProperty="PRODUCTCODE"
                                                @bind-Value=@i.Products[0].PRODUCT_CODE
                                                Change="@(args => OnChangeProductGroup(args , index , 0))" />
                                }
                                else
                                {
                                    @(i.Products.Count() != 0 ? i.Products[0].PRODUCT_NAME : "")
                                }
                            </td>
                            <td class=@($"{tdClassColor}") style="width:3rem">@(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy? i.Products[0].SALETOTAL: "")</td>
                            <td class=@($"{tdClassColor}") style="width:3rem">
                                @if (selectRowGroup == index && selectRowGroupProduct == 0 && !i.IsEmptySlot)
                                 {
                                        var validat = OnValidateInputGroup(i.Products[0].LOADIN, i.SLOT_NO , false) ? "validat" : null;
                                        <RadzenNumeric class=@($"text-size {validat}")
                                               ShowUpDown="false"
                                               TextAlign="TextAlign.End"
                                               TValue="int"
                                               @bind-Value=@i.Products[0].LOADIN
                                               @oninput=@(args => OnChangeNumberGroup2(args , i.Products[0] ,"LOADIN")) />
                                 }
                                 else 
                                 {
                                    @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].LOADIN : "")
                                 }
                             </td>
                            <td class=@($"{tdClassColor}") style="width:3rem">
                                @(i.Products.Count() != 0 && !i.IsEmptySlot || i.Products[0].IsCopy ? i.Products[0].SALEPRICE : "")
                            </td>
                            <td class=@($"{tdClassColor}") style="width:4.5rem">
                                <div style="width:4rem">
                                
                                
                                @if (!i.IsEmptySlot && i.Products[0].SLOTSTATUS) 
                                {
                                    <RadzenDropDown 
                                        class="dropdown-sm fw-bold w-100" 
                                        TValue="double?" 
                                        @bind-Value=@i.Products[0].Move 
                                        Data=@option 
                                        Change="@(val => OnChangeSlot((double)val , i.Products[0] , i))" 
                                        Disabled=@disableMove />
                                }
                                </div>
                            </td>
                            <td class=@($"{tdClassColor} text-center")  style="width:6rem">
                                <div>
                                @if (!i.IsEmptySlot && i.Products[0].SLOTSTATUS )
                                {
                                        if (selectRowGroup == index && selectRowGroupProduct == 0)
                                        {
                                            <RadzenButton Click=@(() => OnSaveChange(i , i.Products[0]))
                                                          Text="บันทึก"
                                                          ButtonStyle="ButtonStyle.Primary"
                                                          Size="ButtonSize.ExtraSmall"
                                                          Disabled=@(ValidateAddNewGroup(i,0)) />
                                        }
                                }

                                @if(!i.IsEmptySlot)
                                {
                                     @RenderButtonDeleteChange(i.Products.Count() != 0 ? i.Products[0] : null , index , 0)
                                }
                                </div>
                            </td>
                         </tr>
                        @foreach(var (d , idx) in i.Products.Skip(1).WithIndex())
                        {
                            var rawProductName2 = product.Find(x => x.RAWPRODUCTCODE == d.RAWPRODUCTCODE);
                            var trClassColorDetail = d.IsAddSlot ? "table-success" : trClassColor;
                            var tdClassColorDetail = d.IsAddSlot ? "grp-color-new" : d.IsStatusChange ? "grp-color-change" : !d.SLOTSTATUS ? "grp-color-off" : null;

                            <tr role="button" draggable="@(formModel.Filter == 3 ? "true" : "false")" @ondrop="@(()=> Drop(i))" @ondrag="@(e => StartDrag(i))" class=@($"{trClassColorDetail}")>
                                <td class=@($"{tdClassColorDetail}") style="width:2rem"> @(d != null ? d.SlotRealPriceOld : "")</td>
                                <td class=@($"{tdClassColorDetail}") style="width:2rem"> @(d != null ? d.SLOT_CONTRACT_PRICE : "")</td>
                                <td class=@($"{tdClassColorDetail}")>
                               
                                @if (selectRowGroup == index && selectRowGroupProduct == idx + 1)
                                {
                                    <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                    TValue="string"
                                                    Data=@product
                                                    TextProperty="RAWPRODUCTNAME"
                                                    ValueProperty="RAWPRODUCTCODE"
                                                    @bind-Value=@d!.RAWPRODUCTCODE
                                                    Change="@(args => OnChangeRawProduct(args))" />
                                }
                                else
                                {
                                    @(rawProductName2 != null ? rawProductName2!.RAWPRODUCTNAME : "")
                                }
                                </td>
                                <td class=@($"{tdClassColorDetail}")>
                                @if(selectRowGroup == index && selectRowGroupProduct == idx + 1)
                                {
                                    <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    FilterOperator="StringFilterOperator.StartsWith"
                                                    AllowFiltering="true"
                                                    TValue="string"
                                                    Data=@optionProducts
                                                    TextProperty="PRODUCTNAME"
                                                    ValueProperty="PRODUCTCODE"
                                                    @bind-Value=@i.Products[idx + 1].PRODUCT_CODE
                                                    Change="@(args => OnChangeProductGroup(args , index , idx +1))" />
                                }
                                else 
                                {
                                    @(d != null ? d.PRODUCT_NAME : "")
                                }
                                </td>
                                <td class=@($"{tdClassColorDetail}")>@(d != null ? d.SALETOTAL : 0)</td>
                                <td class=@($"{tdClassColorDetail}")>
                                     @if(selectRowGroup == index && selectRowGroupProduct == idx +1) 
                                    {
                                        var validat = OnValidateInputGroup(d!.LOADIN, i.SLOT_NO , false) ? "validat" : null;
                                        <RadzenNumeric class=@($"text-size {validat}")
                                               ShowUpDown="false"
                                               TextAlign="TextAlign.End"
                                               TValue="int"
                                               @bind-Value=@d.LOADIN
                                               @oninput=@(args => OnChangeNumberGroup2(args , d ,"LOADIN")) />
                                    }
                                    else 
                                    {
                                        @(d != null ? d.LOADIN : "")
                                    }
                                </td>
                                <td class=@($"{tdClassColorDetail}")>
                                   
                                    @(d != null ? d.SALEPRICE : "")
                                </td>
                                <td class=@($"{tdClassColorDetail}") style="width:4.5rem">
                                    @{
                                        var disableMove2 = selectRowGroup != null && selectRowGroupProduct != null || !d!.SLOTSTATUS;
                                    }

                                    @if(d!.SLOTSTATUS && !d.STATUSCHANGE || d.IsSave) 
                                    {
                                        <div style="width:4rem">
                                            <RadzenDropDown class="dropdown-sm fw-bold w-100"
                                                            TValue="double?"
                                                            @bind-Value=@d!.Move
                                                            Data=@option
                                                            Change="@(val => OnChangeSlot((double)val , d! , i))"
                                                            Disabled=@disableMove2 />
                                        </div>
                                    }
                                 </td>
                                 <td class=@($"{tdClassColorDetail} text-center") style="width:5rem">
                                    <div>
                                    @if(selectRowGroup == index && selectRowGroupProduct == idx +1)
                                    {
                                        <RadzenButton Click=@(() => OnSaveChange(i , d))
                                                      Text="บันทึก"
                                                      ButtonStyle="ButtonStyle.Primary"
                                                      Size="ButtonSize.ExtraSmall"
                                                      Disabled=@(ValidateAddNewGroup(i,idx + 1)) />
                                    }
                                    @RenderButtonDeleteChange(d , index , idx + 1)
                                    </div>
                                </td>
                            </tr>
                        }
                    }
            </tbody>
         </table>
    }
</div>

<RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
    @if(IsCurrent)
    {
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenButton 
                Click="()=> SaveChangeProduct(0)" 
                Text="บันทึก" 
                Style="width: 80px;text-transform: none;" 
                Disabled=@(SelectRowEdit != null || (selectRowGroup != null && selectRowGroupProduct != null))/>
            <RadzenButton 
                Shade="Shade.Lighter" 
                ButtonStyle="ButtonStyle.Light" 
                Click="()=> SaveChangeProduct(1)" 
                Text="ยกเลิกการเปลี่ยนสินค้า" 
                Style="width: 200px;text-transform: none;"
                Disabled=@(SelectRowEdit != null || (selectRowGroup != null && selectRowGroupProduct != null)) />
        </RadzenStack>
        <RadzenButton Text="ปิด" Click="(() => Dialog!.Close(false))" ButtonStyle="ButtonStyle.Light" Style="text-transform: none;" />
    }
</RadzenStack>

@inject IChangeProductService ChangeProductService
@inject IDialogService DialogServiceCustom
@inject DialogService DialogService
@code {
    [Parameter]
    public ChangeProductRequest Item { get; set; } = new();
    [Parameter]
    public DialogService? Dialog { get; set; }
    [Parameter]
    public bool IsCurrent { get; set; }

    class FormModel
    {
        public int SlotRealPrice { get; set; }
        public int Filter { get; set; } = 1;
    }

    FormModel formModel = new FormModel();

    public int? SelectRowEdit = null;
    public bool actionButton= true;
    public int? selectRowGroup = null;
    public int? selectRowGroupProduct = null;
    public int targetValue = 0;
    List<double> optionsSlot = new();

    ChangeProductHeader header = new();
    List<ChangeProductDetail2> detail = new();
    List<ChangeProductGroup> groupDetail = new();
    List<Rawproduct> product = new();
    CompareOperator compareOperator = CompareOperator.NotEqual;
    public List<RawproductDetail2> optionProducts = new();

    int currentIndex;
    // Default row
    // IsStatusChange = false,
    // STATUSCHANGE = false,
    // IsAddSlot = false,

    // Change Product
    // เเถวใหม่
    // IsStatusChange = true,
    // STATUSCHANGE = true,
    // IsAddSlot = false,
    // แถวเก่า
    // IsStatusChange = true,
    // STATUSCHANGE = false,
    // IsAddSlot = false,

    // Add row
    // IsStatusChange = false,  
    // STATUSCHANGE = true,
    // IsAddSlot = true,

    #region Load data
    protected override async Task OnInitializedAsync()
    {
        await LoadDataChangeProduct();
    }

    private async Task LoadDataChangeProduct()
    {
        var body = new RawproductRequest { RawProductCode = "" };
        var res = await ChangeProductService.GetChangeProduct(Item);
        var resProduct = await ChangeProductService.GetRawproduct(body);

        header = res.Header;
        if (header.TYPE_METER == "2")
        {
            detail = res.Detail;
        }
        else
        {
            groupDetail = GroupDetail(res.Detail).FilterGroup(formModel.Filter);
            optionsSlot = groupDetail.Select(x => x.SLOT_REALPRICE).ToList();

        }

        product = resProduct.Data;
        StateHasChanged();
    }
    #endregion

    #region ตู้ 1:1
    private void SelectDetail(ChangeProductDetail2 item ,RawproductDetail2 selectProduct , int index)
    {
        var realprice = detail.Where((x ,i) => x.PRODUCT_CODE == selectProduct.PRODUCTCODE && x.STATUSCHANGE && index != i);

        if (realprice.Count() == 0)
        {
            realprice = detail.Where((x, i) => x.PRODUCT_CODE == selectProduct.PRODUCTCODE && !x.STATUSCHANGE && index != i);
        }

        item.PRODUCT_CODE = selectProduct.PRODUCTCODE;
        item.PRODUCT_NAME = selectProduct.PRODUCTNAME;
        item.SALETOTAL = selectProduct.SALETOTAL;
        item.SALEPRICE = !string.IsNullOrWhiteSpace(selectProduct.SALEPRICE)? int.Parse(selectProduct.SALEPRICE) : 0;
        item.SLOT_REALPRICE = realprice.Count() > 0 ? realprice.First().SLOT_REALPRICE : 0;
        item.SLOT_INSTALLPRICE = realprice.Count() > 0 ? realprice.First().SLOT_INSTALLPRICE : 0;
        item.SLOT_CONTRACT_PRICE = realprice.Count() > 0 ? realprice.First().SLOT_CONTRACT_PRICE : 0;
        item.LOADIN = 0;
        // actionButton = false;
        StateHasChanged();
    }

    private void OptionRow(ChangeProductDetail2 item , bool delete = false)
    {
        if(delete)
        {
            if (item.STATUSCHANGE)
            {
                var record = detail.Find(x => x.SLOT_NO == item.SLOT_NO && !x.STATUSCHANGE);
                if(record != null)
                {
                    record.STATUSCHANGE = false;
                    record.IsStatusChange = false;
                    record.IsAddSlot = false;
                }
            }
            detail.Remove(item);
            SelectRowEdit = null;
        }
        else
        {
            // off row
            item.SLOTSTATUS = !item.SLOTSTATUS;
        }
        StateHasChanged();
    }

    private void SaveRowChange(ChangeProductDetail2 productChang)
    {
        // ราคาสินค้าตัวเดียวกันต้องเท่ากับราคาสินค้าตัวที่เปลี่ยน

        // หาสินค้าที่เหมือนกับสินค้าที่เปลี่ยนทั้งหมดในตู้
        var products = detail.Where(x => x.PRODUCT_CODE == productChang.PRODUCT_CODE && productChang.SLOT_NO != x.SLOT_NO);
        if (products.Count() != 0)
        {
            foreach (var i in products.ToList())
            {
                // check change product
                var change = detail.FindLast(x => x.SLOT_NO == i.SLOT_NO);
                var changeIdx = detail.FindLastIndex(x => x.SLOT_NO == i.SLOT_NO);
                if (!change!.STATUSCHANGE && change.SLOT_REALPRICE != productChang.SLOT_REALPRICE)
                {
                    // add row change product
                    ChangeProductDetail2 newPrice = new ChangeProductDetail2
                    {
                        SLOT_REALPRICE = productChang.SLOT_REALPRICE,
                        SLOT_INSTALLPRICE = productChang.SLOT_INSTALLPRICE,
                        SLOT_CONTRACT_PRICE = productChang.SLOT_CONTRACT_PRICE
                    };
                    ChangeProduct(changeIdx , change , newPrice , false);
                }
                else
                {
                    change.SLOT_REALPRICE = productChang.SLOT_REALPRICE;
                    change.SLOT_INSTALLPRICE = productChang.SLOT_INSTALLPRICE;
                    change.SLOT_CONTRACT_PRICE = productChang.SLOT_CONTRACT_PRICE;
                }

                // var idx = detail.FindIndex(x => x.SLOT_NO == i.SLOT_NO);
                // detail[idx].SLOT_REALPRICE = productChang.SLOT_REALPRICE;
            }
        }

        SelectRowEdit = null;
        actionButton = true;
        StateHasChanged();
    }

    private void AddSlot(int index, ChangeProductDetail2 item)
    {
        var last = detail.FindLast(x => x.SLOT_NO == item.SLOT_NO);
        var lastIdx = detail.FindLastIndex(x => x.SLOT_NO == item.SLOT_NO);
        var idx = lastIdx == detail.Count() - 1 && last!.STATUSCHANGE ? index + 2 : index + 1;

        detail.Insert(idx, new ChangeProductDetail2
            {
                MACHINE_CODE = item.MACHINE_CODE,
                SLOT_NO = item.SLOT_NO + 1,
                RAWPRODUCTCODE = item.RAWPRODUCTCODE,
                PRODUCT_CODE = item.PRODUCT_CODE,
                PRODUCT_NAME = item.PRODUCT_NAME,
                SLOT_INSTALLPRICE = item.SLOT_INSTALLPRICE,
                SLOT_REALPRICE = item.SLOT_REALPRICE,
                SLOT_CONTRACT_PRICE = item.SLOT_CONTRACT_PRICE,
                SLOTSTATUS = item.SLOTSTATUS,
                SALEPRICE = item.SALEPRICE,
                SALETOTAL = item.SALETOTAL,
                IsStatusChange = false,
                STATUSCHANGE = true,
                IsAddSlot = true,
            });

        StateHasChanged();
    }

    private void ChangeProduct(int index, ChangeProductDetail2 item, ChangeProductDetail2? newPrice = null , bool selectRow = true)
    {
        item.IsStatusChange = true;
        item.STATUSCHANGE = false;

        // if (newPrice != null)
        // {
        //     item.SLOT_REALPRICE = newPrice.SLOT_REALPRICE;
        //     item.SLOT_INSTALLPRICE = newPrice.SLOT_INSTALLPRICE;
        //     item.SLOT_CONTRACT_PRICE = newPrice.SLOT_CONTRACT_PRICE;
        // }

        detail.Insert(index + 1, 
            new ChangeProductDetail2
            {
                MACHINE_CODE = item.MACHINE_CODE,
                SLOT_NO = item.SLOT_NO,
                RAWPRODUCTCODE = item.RAWPRODUCTCODE,
                PRODUCT_CODE = item.PRODUCT_CODE,
                PRODUCT_NAME = item.PRODUCT_NAME,
                SALETOTAL = item.SALETOTAL,
                SLOT_INSTALLPRICE = newPrice != null ? newPrice.SLOT_INSTALLPRICE : item.SLOT_INSTALLPRICE,
                SLOT_REALPRICE = newPrice != null ? newPrice.SLOT_REALPRICE : item.SLOT_REALPRICE,
                SLOT_CONTRACT_PRICE = newPrice != null ? newPrice.SLOT_CONTRACT_PRICE : item.SLOT_CONTRACT_PRICE,
                SLOTSTATUS = item.SLOTSTATUS,
                SALEPRICE = item.SALEPRICE,
                IsStatusChange = true,
                STATUSCHANGE = true,
                IsAddSlot = false,
            });

        if (selectRow) SelectRowEdit = index + 1;

        StateHasChanged();
    }

    private async Task DialogLoading()
    {
        var task = InvokeAsync(async () =>
        {
            await LoadDataChangeProduct();
            await Task.Delay(1500);
            DialogServiceCustom.DialogClose();
        });
        await DialogServiceCustom.BusyDialog("กำลังบันทึกข้อมูลดข้อมูล...");
    }

    private async Task SaveTypeMeter1(int cancel)
    {
        List<SaveChangeProductData> prod = new();

        // foreach(var item in groupDetail.Where(x => !x.IsEmptySlot)) 
        foreach(var item in groupDetail) 
        {
            foreach(var prd in item.Products)
            {
                var status = prd.IsAddSlot ? "2" : prd.STATUSCHANGE ? "1" : "0";
                prod.Add(new SaveChangeProductData
                {
                    MACHINE_CODE = header.MACHINE_CODE,
                    RAWPRODUCTCODE = prd.RAWPRODUCTCODE,
                    PRODUCT_CODE = prd.PRODUCT_CODE,
                    PRODUCT_NAME = prd.PRODUCT_NAME,
                    SLOT_NO = item.SLOT_NO.ToString(),
                    SLOT_INSTALLPRICE = prd.SLOT_INSTALLPRICE.ToString(),
                    SLOT_REALPRICE = prd.SLOT_REALPRICE == 0 ? item.SLOT_REALPRICE.ToString() : prd.SLOT_REALPRICE.ToString(),
                    SLOT_CONTRACT_PRICE = prd.SLOT_CONTRACT_PRICE.ToString(),
                    SLOTSTATUS = prd.SLOTSTATUS ? "1" : "0",
                    LOADIN = prd.LOADIN.ToString(),
                    STATUSCHANGE = status
                });
            }
        }
        // await SaveTypeMeter2(cancel ,prod);
    }

    private async Task SaveTypeMeter2(int cancel, List<SaveChangeProductData>? d = null)
    {
        var data = new SaveChangeProductRequest
                {
                    ORG = Item.ORG,
                    Location = Item.Location,
                    Machine = Item.Machine,
                    ChangeDate = Item.ChangeDate,
                    Cancel = cancel.ToString(),
                    Data = d == null ? detail.Select(x => ConvertModel.SaveChangeProductDataModel(x)).ToList() : d
                };

        var response = await ChangeProductService.SaveChangeProduct(data);
        if (response.ErrorMessage == "success")
        {
            await DialogLoading();
        }
    }

    private async Task SaveChangeProduct(int cancel)
    {
        if (header.TYPE_METER == "2")
        {
            await SaveTypeMeter2(cancel);
        }
        else
        {
            await SaveTypeMeter1(cancel);
        }
    }

    private bool FindRowLastIndex(int index,ChangeProductDetail2 item)
    {
        // เช็คว่า slot สุดท้ายมีการเปลี่ยนสินค้าหรือไม่
        var last = detail.FindLast(x => x.SLOT_NO == detail.Last().SLOT_NO);
        var lastIdx = detail.FindLastIndex(x => x.SLOT_NO == detail.Last().SLOT_NO);

        return index == (last!.STATUSCHANGE && !last.IsAddSlot? lastIdx - 1 : lastIdx);
    }

    private void OnChangeNumber(ChangeEventArgs arg, ChangeProductDetail2 item , string field)
    {
        var str = $"{arg.Value}";

        if (field != "LOADIN")
        {
            var value = !string.IsNullOrEmpty(str) ? double.Parse(str) : 0;
            Type type = typeof(ChangeProductDetail2);
            ChangeProductDetail2 obj = item;
            PropertyInfo objField = type.GetProperty(field)!;
            objField.SetValue(obj, value);
        }
        else
        {
            var value = !string.IsNullOrEmpty(str) ? int.Parse(str) : 0;
            Type type = typeof(ChangeProductDetail2);
            ChangeProductDetail2 obj = item;
            PropertyInfo objField = type.GetProperty(field)!;
            objField.SetValue(obj, value);
        }

    }
    #endregion

    #region ตู้กลุ่ม
    private List<ChangeProductGroup> GroupDetail(List<ChangeProductDetail2> detail)
    {
      
        var data = detail.GroupBy(x => new { x.SLOT_NO, x.SLOT_REALPRICE })
                        .Select(g => new ChangeProductGroup
                        {
                            SLOT_NO = g.Key.SLOT_NO.ToString() , 
                            SLOT_REALPRICE = g.Key.SLOT_REALPRICE,
                            Products = g.ToList(),
                            IsEmptySlot = g.Count() == 1 ? string.IsNullOrWhiteSpace(g.FirstOrDefault()!.PRODUCT_CODE)  : false
                        }).ToList();
        return data;
    }

    private void OnChangeNumberGroup(ChangeEventArgs arg, ChangeProductGroup item, string field)
    {
        var str = $"{arg.Value}";
        var value = !string.IsNullOrEmpty(str) ? double.Parse(str) : 0;
        Type type = typeof(ChangeProductGroup);
        ChangeProductGroup obj = item;
        PropertyInfo objField = type.GetProperty(field)!;
        objField.SetValue(obj, value);
    }

    private void OnChangeNumberGroup2(ChangeEventArgs arg, ChangeProductDetail2 item, string field)
    {
        var str = $"{arg.Value}";
        var value = !string.IsNullOrEmpty(str) ? int.Parse(str) : 0;
        Type type = typeof(ChangeProductDetail2);
        ChangeProductDetail2 obj = item;
        PropertyInfo objField = type.GetProperty(field)!;
        objField.SetValue(obj, value);
    }

    private bool ValidateAddNewGroup(ChangeProductGroup item , int index = 0)
    {
        return item.Products[index].PRODUCT_CODE == "" || item.Products[index].RAWPRODUCTCODE == "" ? true : 
        OnValidateInputGroup(item.SLOT_REALPRICE, item.SLOT_NO) || OnValidateInputGroup(item.Products[index].LOADIN, item.SLOT_NO , false);
    }

    private bool OnValidateInputGroup(double val, string slot, bool isDup = true)
    {
        if (val == 0 )
        {
            return true;
        }
        else if (isDup)
        {
            var fn = groupDetail.Find(x => x.SLOT_REALPRICE == val && x.SLOT_NO != slot);
            if (fn != null)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }

    private async Task AddRowGrpup()
    {
        var result = await DialogService.OpenAsync("ตั้งราคาขาย", ds =>
        @<div class="row">
            <div>
                <RadzenTemplateForm TItem="FormModel" Data=@formModel Submit=@OnSubmit >
                        <div class="row mb-3">
                            <div class="col-6">
                                <RadzenLabel Text="กลุ่มราคาขาย" />
                            </div>
                            <div >
                                <RadzenNumeric ShowUpDown="false" style="display: block" Name="SlotRealPrice" @bind-Value=@formModel.SlotRealPrice TValue="int" class="w-100" />
                                <RadzenCompareValidator Value=@targetValue Component="SlotRealPrice" Text="ไม่สามารถกำหนดราคาขายเป็น 0 ได้!" Operator=@compareOperator />
                                <RadzenCustomValidator Component="SlotRealPrice" Validator="@(() => ValidateRealPrice(formModel.SlotRealPrice))" Text="กลุ่มราคาขายนี้มีอยู่เเล้ว!" />
                            </div>
                        </div>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenStack Orientation="Orientation.Horizontal">
                                <RadzenButton ButtonType="ButtonType.Submit" Text="บันทึก" Style="width: 80px;" />
                                <RadzenButton Text="ยกเลิก" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                            </RadzenStack>
                        </RadzenStack>
                </RadzenTemplateForm>
            </div>
        </div>
    );

        formModel = new();
    }

    bool ValidateRealPrice(int val)
    {
        if (val == 0) return true;
        return groupDetail.Find(x => x.SLOT_REALPRICE == val) == null;
    }

    void onChangeSlotGroup(double val, ChangeProductGroup grp)
    {
        var slot = groupDetail.Find(x => x.SLOT_REALPRICE == val);

        if(slot != null)
        {
            foreach (var prd in grp.Products)
            {
                prd.Move = null;
                prd.IsStatusChange = true;
                prd.STATUSCHANGE = true;
                prd.IsSave = false;
                prd.SLOT_REALPRICE = val;
                prd.SlotRealPriceOld = grp.SLOT_REALPRICE;
                slot.Products.Add(prd);
            }

            grp.Products = new List<ChangeProductDetail2> {
                new ChangeProductDetail2
                {
                    SLOT_NO = int.Parse(grp.SLOT_NO) ,
                    SLOTSTATUS = true,
                    SLOT_REALPRICE = grp.SLOT_REALPRICE
                }
            } ;
            grp.IsEmptySlot = true;
        }
    }

    void OnChangeSlot(double val , ChangeProductDetail2 item ,ChangeProductGroup grp)
    {
        var slot = groupDetail.Find(x => x.SLOT_REALPRICE == val);
        item.Move = null;
        if(slot != null)
        {
            var s = slot.Products.Find(x => x.RAWPRODUCTCODE == item.RAWPRODUCTCODE && x.PRODUCT_CODE == item.PRODUCT_CODE);

            if(s != null)
            {
                s.IsStatusChange = false;
                s.STATUSCHANGE = false;
                s.SLOTSTATUS = true;

                grp.Products.Remove(item);
            }
            else
            {
                if(slot.IsEmptySlot)
                {
                    item.IsStatusChange = true;
                    item.STATUSCHANGE = true;
                    item.IsSave = false;
                    item.SLOTSTATUS = true;
                    item.SLOT_REALPRICE = val;
                    slot.IsEmptySlot = false;
                    slot.Products[0] = item;
                }
                else
                {
                    var copy = (ChangeProductDetail2)item.Clone();

                    copy.IsAddSlot = false;
                    copy.IsStatusChange = true;
                    copy.STATUSCHANGE = true;
                    copy.SLOT_REALPRICE = val;
                    copy.LOADIN = item.LOADIN;
                    copy.IsSave = false;

                    item.SLOTSTATUS = false;
                    item.IsCopy = true;

                    slot.Products.Add(copy);
                }

                if (grp.Products.Count() > 1)
                {
                    grp.Products.Remove(item);
                }
                else
                {
                    grp.Products = new List<ChangeProductDetail2>
                            {
                            new ChangeProductDetail2
                            {
                                SLOT_NO = int.Parse(grp.SLOT_NO) ,
                                SLOTSTATUS = true
                            }
                            };
                    grp.IsEmptySlot = true;
                }
            }
        }
    }

    void OnSubmit(FormModel model)
    {
        groupDetail.Add(new ChangeProductGroup
            {
                SLOT_NO = (groupDetail.Count() + 1).ToString(),
                SLOT_REALPRICE = model.SlotRealPrice,
                IsAddSlot = true,
                IsEmptySlot = true,
                Products = new List<ChangeProductDetail2>()
                {
                    new ChangeProductDetail2
                    {
                        SLOT_NO = groupDetail.Count() + 1,
                        SLOTSTATUS = true,
                    }
                }
        });

        groupDetail = groupDetail.FilterGroup(formModel.Filter);


        optionsSlot = groupDetail.Select(x => x.SLOT_REALPRICE).ToList();

        DialogService.Close(true);
    }

    private void OnChangeProductGroup(object args , int index , int idx)
    {
        var prod = groupDetail[index].Products[idx];
        var option = optionProducts.Find(x => x.PRODUCTCODE == $"{args}");
        prod.PRODUCT_NAME = option!.PRODUCTNAME;
        prod.SALETOTAL = !string.IsNullOrWhiteSpace(option!.SALETOTAL) ? option!.SALETOTAL : "0";
        prod.SALEPRICE = int.Parse(option!.SALEPRICE);
        prod.SLOT_REALPRICE = groupDetail[index].SLOT_REALPRICE;
        prod.SlotRealPriceOld = groupDetail[index].SLOT_REALPRICE;
        prod.SlotRealPriceInit = groupDetail[index].SLOT_REALPRICE;
        prod.IsStatusChange =!prod.IsAddSlot ? true : false;
        prod.STATUSCHANGE = !prod.IsAddSlot ? true : false;
    }

    private void OnOpenRowGroup(ChangeProductGroup item, bool action)
    {
        selectRowGroup = null;
        selectRowGroupProduct = null;
        if (!item.IsEmptySlot && !action)
        {
            item.SlotStatus = !item.SlotStatus;
            foreach (var j in item.Products)
            {
                j.SLOTSTATUS = !j.SLOTSTATUS;
            }
        }
        else
        {
            groupDetail.Remove(item);
        }
    }

    private RenderFragment RenderButtonDeleteChange(ChangeProductDetail2? item , int index , int idx)
    {
        var disble1 = selectRowGroup != null && selectRowGroupProduct != null ? !(selectRowGroup == index && selectRowGroupProduct == idx)  : false;
        RenderFragment content = 
        @<RadzenButton Click=@(() => DeleteProduct(item! , index))
                  Icon="delete_forever"
                  ButtonStyle="ButtonStyle.Danger"
                  Size="ButtonSize.ExtraSmall"
                  Disabled=@disble1 />
    ;
        
        if(item!.SlotRealPriceInit == item.SLOT_REALPRICE || !item.IsAddSlot && item.IsSave)
        // if(!item!.IsAddSlot && item.IsSave)
        {
            var disable2 = selectRowGroup != null && selectRowGroupProduct != null;
            content = @<RadzenButton Click=@(() => OffRowProduct(item!))
                                  Text=@(item.SLOTSTATUS ? "off" : "on")
                                  ButtonStyle=@(item.SLOTSTATUS  ? ButtonStyle.Danger : ButtonStyle.Success)
                                  Style="text-transform: none;" 
                                  Size="ButtonSize.ExtraSmall"
        Disabled=@disable2 />
    ;
        }
        return content;
    }

    private async Task SelectRowGroup(int index, int idx)
    {
        selectRowGroup = index;
        selectRowGroupProduct = idx;

        var grp = groupDetail[index].Products[idx];

        var raw = grp.RAWPRODUCTCODE;

        // grp.IsStatusChange = true;
        // grp.STATUSCHANGE = true;

        var body = new RawproductDetail2Request
                {
                    RawProductCode = raw,
                    ORG = Item.ORG,
                    Location = Item.Location,
                    Machine = Item.Machine
                };
        var res = await ChangeProductService.GetRawproductDetail2(body);
        optionProducts = res.Data;
    }

    private void OffRowProduct(ChangeProductDetail2 item)
    {
        item.SLOTSTATUS = !item.SLOTSTATUS;
    }

    private void DeleteProduct(ChangeProductDetail2 item, int index)
    {
        var grp = groupDetail[index];
        var slot = groupDetail.Find(x => x.SLOT_REALPRICE == item.SlotRealPriceInit && x.SLOT_REALPRICE != grp.SLOT_REALPRICE);
        if (slot != null)
        {
            if (grp.IsAddSlot)
            {
                if (slot.Products.Count() == 1 && slot.IsEmptySlot)
                {
                    slot.IsEmptySlot = false;
                    slot.Products[0].IsAddSlot = false;
                    slot.Products[0].IsStatusChange = false;
                    slot.Products[0].STATUSCHANGE = false;
                    slot.Products[0].SLOT_REALPRICE = item.SLOT_REALPRICE;
                    slot.Products[0].SlotRealPriceOld = item.SlotRealPriceInit;
                    slot.Products[0].RAWPRODUCTCODE = item.RAWPRODUCTCODE;
                    slot.Products[0].PRODUCT_NAME = item.PRODUCT_NAME;
                    slot.Products[0].PRODUCT_CODE = item.PRODUCT_CODE;
                    slot.Products[0].SALETOTAL = item.SALETOTAL;
                    slot.Products[0].SALEPRICE = item.SALEPRICE;
                }
                else
                {
                    item.IsAddSlot = false;
                    item.IsStatusChange = false;
                    item.STATUSCHANGE = false;
                    // item.SLOTSTATUS = true;
                    slot.Products.Add(item);
                }


                if (grp.Products.Count() == 1)
                {
                    grp.Products[0] = new ChangeProductDetail2 
                    { 
                        SLOT_NO = item.SLOT_NO  , 
                        SLOTSTATUS = true 
                    };
                    grp.IsEmptySlot = true;
                }
                else
                {
                    grp.Products.Remove(item);
                }
            }
            else
            {
                item.IsAddSlot = false;
                item.IsStatusChange = false;
                item.STATUSCHANGE = false;
                if (slot.SLOT_REALPRICE == item.SlotRealPriceInit && !item.IsAddSlot)
                {
                    item.IsSave = true;
                }

                if (!slot.IsEmptySlot)
                {
                    slot.Products.Add(item);
                    grp.Products.Remove(item);
                }else
                {
                    slot.IsEmptySlot = false;
                    slot.Products[0].IsSave = item.IsSave;
                    slot.Products[0].IsAddSlot = item.IsAddSlot;
                    slot.Products[0].IsStatusChange = item.IsStatusChange;
                    slot.Products[0].STATUSCHANGE = item.STATUSCHANGE;
                    slot.Products[0].SLOT_REALPRICE = slot.SLOT_REALPRICE;
                    slot.Products[0].SlotRealPriceOld = item.SlotRealPriceInit;
                    slot.Products[0].SlotRealPriceInit = item.SlotRealPriceInit;
                    slot.Products[0].RAWPRODUCTCODE = item.RAWPRODUCTCODE;
                    slot.Products[0].PRODUCT_NAME = item.PRODUCT_NAME;
                    slot.Products[0].PRODUCT_CODE = item.PRODUCT_CODE;
                    slot.Products[0].SALETOTAL = item.SALETOTAL;
                    slot.Products[0].SALEPRICE = item.SALEPRICE;
                }
            }
        }
        else
        {
            if (grp.Products.Count() == 1)
            {
                grp.Products[0] = new ChangeProductDetail2
                        {
                            SLOT_NO = item.SLOT_NO,
                            SLOTSTATUS = true
                        };
                grp.IsEmptySlot = true;
            }
            else
            {
                grp.Products.Remove(item);
            }
        }
        selectRowGroup = null;
        selectRowGroupProduct = null;
    }

    private async Task OnChangeRawProduct(object args)
    {
        var body = new RawproductDetail2Request
            {
                RawProductCode = $"{args}",
                ORG = Item.ORG,
                Location = Item.Location,
                Machine = Item.Machine
            };
        var res = await ChangeProductService.GetRawproductDetail2(body);
        optionProducts = res.Data;
        StateHasChanged();
    }

    private void AddNewProductGroup(ChangeProductGroup group,  int grpIndex)
    {
        var slot = int.Parse(group.SLOT_NO);

        if(!group.IsEmptySlot)
        {
            group.Products.Add(new ChangeProductDetail2
            {
                    SLOT_NO = slot,
                    SLOTSTATUS = true,
                    IsAddSlot = true,
            });
        }
        else
        {
            group.IsEmptySlot = false;
            group.Products[0].IsAddSlot = true;
        }

        var last = group.Products.Last();

        selectRowGroup = grpIndex;

        selectRowGroupProduct = group.Products.FindLastIndex(x => x.SLOT_NO == slot && x.RAWPRODUCTCODE == last.RAWPRODUCTCODE && x.PRODUCT_CODE == last.PRODUCT_CODE);

        StateHasChanged();
    }

    private void StartDrag(ChangeProductGroup item)
    {
        currentIndex = GetIndex(item);
    }

    private int GetIndex(ChangeProductGroup item)
    {
        return groupDetail.FindIndex(x => x.SLOT_NO == item.SLOT_NO);
    }

    private void Drop(ChangeProductGroup item)
    {
        if (item != null)
        {
            // หาตำแหน่งของจังหวัดที่ถูก drop
            var index = GetIndex(item);

            // หาจังหวัดที่ถูก drag มา จาก index ที่เก็บไว้ตั้งแต่เริ่ม drag
            var current = groupDetail[currentIndex];

            // ลบจังหวัดที่ถูก drag มา ออกจาก list
            groupDetail.RemoveAt(currentIndex);

            // แทรกจังหวัดที่ถูก drag มา ลงในตำแหน่งที่ drop
            groupDetail.Insert(index, current);

            StateHasChanged();
        }
    }

    private async Task<bool> DialogConfirmChang(string title ="",string message = "")
    {
        bool result = await DialogService.OpenAsync(title, ds =>
        @<RadzenStack Gap="1.5rem">
            @message
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Save" Click="() => ds.Close(true)" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    );

        return result;
    }

    private async Task OnSaveChange(ChangeProductGroup grp, ChangeProductDetail2 item)
    {
        List<ChangeProductDetail2> prd = new();
        #region หาสินค้าที่มีอยู่
        foreach (var g in groupDetail)
        {
            foreach(var p in g.Products)
            {
                prd.Add(p);
            }
        }
        var prdInSlot = prd.Find(x => x.PRODUCT_CODE == item.PRODUCT_CODE && x.SLOT_REALPRICE != grp.SLOT_REALPRICE);
        #endregion

        #region confirm dialog
        string msg = "";
        if(prdInSlot != null)
        {
            msg = $"พบสินค้า {prdInSlot.PRODUCT_NAME} อยู่ในกลุ่มราคาขาย {prdInSlot.SLOT_REALPRICE} ต้องการทำรายการต่อหรือไม่?";
        }
        var result = await DialogConfirmChang(prdInSlot != null ? "ยืนยันการเปลี่ยนสินค้า" : "ยืนยันการเพิ่มสินค้า", msg);
        #endregion

        #region กดยืนยันการเปลี่ยนสินค้าหรือไม่
        if (!result)
        {
            #region ช่องสินค้าว่างหรือไม่
            if (grp.Products.Count() > 1)
            {
                grp.Products.Remove(item);
            }
            else
            {
                grp.Products = new List<ChangeProductDetail2>
                {
                    new ChangeProductDetail2
                    {
                        SLOT_NO = int.Parse(grp.SLOT_NO) ,
                        SLOTSTATUS = true
                    }
                };
                grp.IsEmptySlot = true;
            }
            #endregion
        }
        else
        {
            #region เจอสินค้าในช่องอื่น
            if (prdInSlot != null)
            {
                var g = groupDetail.Find(x => x.SLOT_REALPRICE == prdInSlot.SLOT_REALPRICE);

                if(g!.Products.Count > 1)
                {
                    g.Products.Remove(prdInSlot);
                }
                else
                {
                    g.Products = new List<ChangeProductDetail2>()
                    {
                        new ChangeProductDetail2
                        {
                            SLOT_NO = int.Parse(g.SLOT_NO),
                            SLOTSTATUS = true,
                            IsAddSlot = false,
                        }
                    };
                    g.IsEmptySlot = true;
                }
            }
            #endregion
        }
        #endregion
        selectRowGroup = null;
        selectRowGroupProduct = null;

        StateHasChanged();
    }
    #endregion
}
   
    
    
