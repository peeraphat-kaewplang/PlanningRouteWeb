@inject IChangeProductService ChangeProductService

@if (header.TYPE_METER is "2")
{
    <ChangeProduct Header="header" Data="detail" IsCurrent="IsCurrent" Item="Item" ShowdialogBestProductCallback="@ShowdialogBestProductCallback" />
}
else
{
    <ChangeProuctGroup Header="header" Data="group" IsCurrent="IsCurrent" Item="Item" ShowdialogBestProductCallback="@ShowdialogBestProductCallback" />
}

@code {
    #region Parameter
    [Parameter]
    public ChangeProductRequest Item { get; set; } = new();
    [Parameter]
    public bool IsCurrent { get; set; }
    [Parameter]
    public DialogService? Dialog { get; set; }
    [Parameter]
    public EventCallback<BestProductRequest> ShowdialogBestProductCallback { get; set; }
    #endregion

    #region Data State
    Models.ChangeProductHeader header = new();
    List<ChangeProductDetail2> detail = new();
    List<ChangeProductGroup> group = new();
    #endregion

    #region Load data
    protected override async Task OnInitializedAsync()
    {
        var body = new RawproductRequest { RawProductCode = "" };
        var res = await ChangeProductService.GetChangeProduct(Item);
        if (res.ErrorMessage == "success")
        {
            header = res.Data.Header;
            if (header.TYPE_METER is "2")
            {
                detail = res.Data.Detail
               .Select(x =>
               {
                   var chagePrd = res.Data.Detail.Find(d => d.SLOT_NO == x.SLOT_NO && d.STATUSCHANGE != x.STATUSCHANGE);
                   if (chagePrd != null)
                   {
                       return ConvertModel.ChangeProductDetailModal(x, true);
                   }
                   return ConvertModel.ChangeProductDetailModal(x);
               })
               .OrderBy(x => x.SLOT_NO)
               .ThenBy(x => x.STATUSCHANGE)
               .ToList();
            }
            else
            {
                group = res.Data.Detail.Select(x => ConvertModel.ChangeProductDetailModal(x, x.STATUSCHANGE == "0" ? false : true))
                .GroupBy(x => new { x.SLOT_NO, x.SLOT_REALPRICE, x.SLOT_INSTALLPRICE })
                .Select(g => new ChangeProductGroup
                    {
                        SLOT_NO = g.Key.SLOT_NO.ToString(),
                        SLOT_REALPRICE = g.Key.SLOT_REALPRICE,
                        SLOT_INSTALLPRICE = g.Key.SLOT_INSTALLPRICE,
                        Products = g.ToList(),
                        IsEmptySlot = g.Count() == 1 ? string.IsNullOrWhiteSpace(g.FirstOrDefault()!.PRODUCT_CODE) : false
                    })
                .ToList();


                // var data = group!.Where(x => !x.IsEmptySlot).Select(x => new
                // {
                //     SumPrice = x.Products.Count() * x.SLOT_REALPRICE,
                //     SumCost = x.Products.Sum(p => p.Cost)
                // });

                // var Price = data.Sum(x => x.SumPrice);
                // var Cost = data.Sum(x => x.SumCost);
                // var aa = 0;

            }
        }

        StateHasChanged();
    }
    #endregion
}