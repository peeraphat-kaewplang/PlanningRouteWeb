
@{
    var date = StateContainer.DateCurrent;
    var total = SelectMonth.Number == "01" ? "ธ.ค." : GetDatetimeClass.monthObjects.Single(x => x.Number == (int.Parse(SelectMonth.Number) - 1).ToString("D2")).ShortName;
    var mdtBefore = SelectMonth.Number == "01" ? "ธ.ค." : GetDatetimeClass.monthObjects.Single(x => x.Number == (int.Parse(SelectMonth.Number) - 1).ToString("D2")).ShortName;
    var colSpan = (Columns.Count() * 3) + ((Columns.Count() / 7) * 2);
}
<tr>
    <th class="" rowspan="4" style="font-size: 8px;width:2rem;">ลูกค้า</th>
    <th class="" rowspan="4" style="font-size: 8px;width:2rem;">ตู้ปัจจุบัน</th>
    <th rowspan="4" class="text-center " style="width: 3rem;font-size: 8px;">
        <p class="m-0">GP</p>
        <p class="m-0">@SelectMonth.ShortName</p>
    </th>

    <th rowspan="4" class="text-center " style="width: 3rem;font-size: 8px;">
        <p class="m-0">GP</p>
        <p class="m-0">@mdtBefore</p>
    </th>

    <th rowspan="4" class="text-center " style="width: 2rem;font-size: 8px;width:2rem;">
        <p class="m-0">SKU</p>
        <p class="m-0">%</p>
    </th>

    <th rowspan="4" class="text-center " style="width: 2rem;font-size: 8px;width:3.5rem;">
        <p class="m-0">SKU</p>
        <p class="m-0">คงเหลือ</p>
    </th>

    <th class="text-center" rowspan="4" style="width: 2rem;font-size: 8px;">
        <p class="m-0">TOTAL</p>
        <p class="m-0">@total</p>
    </th>
    <th class="text-center" rowspan="4" style="width: 2rem;font-size: 8px;">
        <p class="m-0">MTD</p>
        <p class="m-0">@mdtBefore</p>
    </th>
    <th class="text-center" rowspan="4" style="width: 2rem;font-size: 8px;">
        <p class="m-0">MTD</p>
        <p class="m-0">@SelectMonth.ShortName</p>
    </th>
    @if (!HideMaster)
    {
        <th colspan="9" class="text-center p-1 ">
            <RadzenButton Text="บันทึกค่ามาตรฐาน"
                          ButtonStyle="ButtonStyle.Secondary"
                          Style="width: 100%;text-transform: none;font-size: 10px;"
                          Size="Radzen.ButtonSize.Small"
                          Click="@(() => OnClickSavePlanCallback.InvokeAsync())" />
        </th>
        <th rowspan="4" class="text-center" style="width:2rem;font-size: 8px;">
            สินค้าขายดี
        </th>
    }

    <th rowspan="4" style="width: 1.5rem;font-size: 8px; padding-left:4px; padding-right:0px;">
        <p class="m-0">Drop</p>
        <p class="m-0">Month</p>
    </th>
    @foreach (var (obj, index) in Columns.WithIndex())
    {
        if ((index + 1) % 7 == 0)
        {
            var chk1 = obj.Value.IsCurrent;
            var chk2 = date.GetWeekNumberOfMonth() == obj.Key.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth() - 1 || (ISOWeek.GetWeeksInYear(date.Year) == date.GetWeekNumberOfMonth() && obj.Key.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth() == 1);
            var action = ActionButton.Date.FirstOrDefault(x => x.Date.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth() == obj.Key.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth());
            var disable = ActionButton.Date.Count(x => x.Error);

            DateTime start;
            DateTime end;
            if (!chk2)
            {
                start = StateContainer.DateCurrent.AddDays(1 + StateContainer.BeforeConfig);
                end = start.LastDayOfWeek();
            }
            else
            {
                start = StateContainer.DateCurrent.LastDayOfWeek().AddDays(1);
                end = start.AddDays(6);
            }

            DateTime dateCurrent = DateTime.ParseExact(obj.Key, "dd/MM/yyyy", null);
            int week = StateContainer.DateCurrent.GetWeekNumberOfMonth();
            int currentWeek = dateCurrent.GetWeekNumberOfMonth();

            if (chk1 || chk2)
            {
                <th colspan="21" class="p-0">
                    <div class="p-1 text-end">

                        @if (week == currentWeek)
                        {
                            if ((WeekValue.Week1 || !WeekValue.Week1) && WeekValue.Week1Value)
                            {
                                <RadzenButton Text="บันทึก"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Style="@($"{StyleHeaderButton(chk2)}text-transform: none;")"
                                              Size="Radzen.ButtonSize.Small"
                                              Click="@(() =>  OnClickSavePlanCallback.InvokeAsync((start.ToStringDate(), end.ToStringDate())))"
                                              Disabled="@(Target.SYSTEMCART && disable > 0 ? true : false)" />
                            }
                            else
                            {
                                <RadzenButton Text="สร้าง"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Style="@($"{StyleHeaderButton(chk2)}text-transform: none;")"
                                              Size="Radzen.ButtonSize.Small"
                                              Click="@(args => CalPlaaning(chk2 ,  obj.Key , "create"))"
                                              Disabled="@(Target.SYSTEMCART && disable > 0 ? true : false)" />
                            }
                        }
                        else
                        {
                            if ((WeekValue.Week2 || !WeekValue.Week2) && WeekValue.Week2Value)
                            {
                                <RadzenButton Text="บันทึก"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Style="@($"{StyleHeaderButton(chk2)}text-transform: none;")"
                                              Size="Radzen.ButtonSize.Small"
                                              Click="@(() =>  OnClickSavePlanCallback.InvokeAsync((start.ToStringDate(), end.ToStringDate())))"
                                              Disabled="@(Target.SYSTEMCART && disable > 0 ? true : false)" />
                            }
                            else
                            {
                                <RadzenButton Text="สร้าง"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Style="@($"{StyleHeaderButton(chk2)}text-transform: none;")"
                                              Size="Radzen.ButtonSize.Small"
                                              Click="@(args => CalPlaaning(chk2 ,  obj.Key , "create"))" />
                            }
                        }

                        <RadzenButton MouseEnter="@(args => ShowTooltip(args , "โหลดใหม่") )"
                                      Icon="autorenew"
                                      Style="width: 1rem"
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Size="Radzen.ButtonSize.Small"
                                      Click="@(args => CalPlaaning(chk2 ,  obj.Key , ActionButton.Action))" />
                    </div>
                </th>
                <th rowspan="4" class="text-end" style="width:1.5rem;font-size:8px;">
                    <p class="m-0">Sale</p>
                    <p class="m-0">Week</p>
                </th>
                <th rowspan="4" class="text-end" style="width:1.5rem;font-size:8px;">Diff</th>
            }
            else
            {
                <th colspan="21" class="p-0"></th>
                <th rowspan="4"  class="text-center" style="width:1.5rem; font-size:8px;">
                    <div class="w-100 text-end">
                        <p class="m-0">Sale</p>
                        <p class="m-0">Week</p>
                    </div>
                </th>
                <th rowspan="4" class="text-center" style="width:1.5rem; font-size:8px;">
                    <div class="w-100 text-end">
                        Diff
                    </div>
                </th>
            }
        }
    }
</tr>


<tr>
    @if (!HideMaster)
    {
        @* ค่ามาตรฐาน *@
        <th rowspan="3" class="text-center " style="width: 1.25rem;font-size: 10px;">จ</th>
        <th rowspan="3" class="text-center " style="width: 1.25rem;font-size: 10px;">อ</th>
        <th rowspan="3" class="text-center " style="width: 1.25rem;font-size: 10px;">พ</th>
        <th rowspan="3" class="text-center " style="width: 1.25rem;font-size: 10px;">พฤ</th>
        <th rowspan="3" class="text-center " style="width: 1.25rem;font-size: 10px;">ศ</th>
        <th rowspan="3" class="text-center " style="width: 1.25rem;font-size: 10px;">ส</th>
        <th rowspan="3" class="px-1 text-center " style="width: 1.25rem;font-size: 10px;">อา</th>
        <th rowspan="3" class="px-2 " style="width: 1rem;font-size: 8px;">
            <p class="m-0">Drop</p>
            <p class="m-0">Week</p>
        </th>
        <th rowspan="3" class="px-3 text-center" style="width: 3.15rem;font-size: 8px;">
            Drop Day
        </th>
    }
</tr>

<tr>
    @foreach (var (obj, index) in Columns.WithIndex())
    {
        <th colspan="3"
            class="@(date.ToContainsDate(obj.Key) ? "today" : $"{obj.Value.ClassColor} color" )"
            style="font-size: 10px; text-align: center;">
            @obj.Value.FieldDateName
        </th>
    }
</tr>

<tr>
    @foreach (var (obj, index) in Columns.WithIndex())
    {
        var errorRank = ActionButton.Date.Find(x => x.Date == obj.Key && x.Error) != null ? "rank-error" : null;
        <th class="@obj.Value.ClassColor color" style="width: 1.5rem; font-size: 8px;text-align: center;">
            <div style="width:100%">
                @obj.Value.FieldDate
            </div>
        </th>
        <th class="@obj.Value.ClassColor color" style="width: 1.5rem; font-size: 8px; text-align: center;">
            <div style="width:100%">
                @obj.Value.FieldValueName
            </div>
        </th>
        <th class="@obj.Value.ClassColor color text-center" style="width: 2rem; font-size: 8px;">
            <div style="width:100%">
                @obj.Value.FieldRankName
            </div>
        </th>
    }
</tr>
@implements IDisposable
@inject StateContainer StateContainer
@inject TooltipService TooltipService
@code {
    [Parameter]
    public MonthObject SelectMonth { get; set; } = new();

    [Parameter]
    public Target2 Target { get; set; } = new();

    [Parameter]
    public Week WeekValue { get; set; } = new();

    [Parameter]
    public IDictionary<string, ColumnProperty> Columns { get; set; } = new Dictionary<string, ColumnProperty>();

    [Parameter]
    public bool HideMaster { get; set; }

    [Parameter]
    public EventCallback<(string, string)> OnClickSavePlanCallback { get; set; }

    [Parameter]
    public EventCallback SortRankCallback { get; set; }

    [Parameter]
    public EventCallback<(string, string, string)> OnCalPlanningCallback { get; set; }

    [Parameter]
    public ChangeActionButton ActionButton { get; set; } = new();

    protected override void OnInitialized()
    {
        // var aa = ActionButton.Date.Find(x => x.Date == obj.Key);
        StateContainer.OnChange += StateHasChanged;
    }

    private void ShowTooltip(ElementReference elementReference, string text, TooltipOptions? options = null) => TooltipService.Open(elementReference, $"{text}", new TooltipOptions { Style = "font-size: 16px" });

    private string StyleHeaderButton(bool chk)
    {
        string style = string.Empty;

        if (chk)
        {
            style = "width: 94%;";
        }
        else
        {
            var name = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(StateContainer.DateCurrent);
            var index = GetDatetimeClass.defultday.FirstOrDefault(x => x.FullName.Contains(name.ToString()))!.Number;
            var con = (7 - index) - StateContainer.BeforeConfig;

            switch (con)
            {
                case 1:
                    style = $"width: {13 * con}%;";
                    break;
                case 2:
                    style = $"width: {13 * con}%;";
                    break;
                case 3:
                    style = $"width: {13.5 * con + 1}%;";
                    break;
                case 4:
                    style = $"width: {13.5 * con + 1}%;";
                    break;
                case 5:
                    style = $"width: {13.5 * con + 1}%;";
                    break;
                case 6:
                    style = $"width: {14 * con}%;";
                    break;
                default:
                    style = $"width: 0%;display:none;";
                    break;
            }
        }

        return style;
    }

    private async Task CalPlaaning(bool chk, string date, string action = "create")
    {
        // if (action == "save")
        // {
        //     await OnClickSavePlanCallback.InvokeAsync();
        // }
        // else
        // {
            DateTime start;
            DateTime end;
            if (!chk)
            {
                start = StateContainer.DateCurrent.AddDays(1 + StateContainer.BeforeConfig);
                end = start.LastDayOfWeek();
            }
            else
            {
                start = StateContainer.DateCurrent.LastDayOfWeek().AddDays(1);
                end = start.AddDays(6);
            }
            await OnCalPlanningCallback.InvokeAsync((start.ToStringDate(), end.ToStringDate(), action));
        // }
    }

    public string ClassHeader(int f, DateTime date, KeyValuePair<string, ColumnProperty> obj)
    {
        var classHeader = $"{obj.Value.ClassColor}  color";
        return classHeader;
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}
