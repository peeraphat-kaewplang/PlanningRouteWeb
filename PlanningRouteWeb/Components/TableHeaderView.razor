@{
    var date = GetDatetimeClass.currentDate;
}
<tr>
    @* class="sticky-col first-col" *@
    @* class="sticky-col second-col" *@
    <th rowspan="4" style="width: 170px;font-size: 12px;">ลูกค้า</th>
    <th rowspan="4" style="width: 140px;font-size: 12px;">จุดตั้ง</th>
    <th rowspan="4" style="width: 40px;font-size: 12px;">ตู้ปัจจุบัน</th>
    <th rowspan="4" style="width: 30px;font-size: 12px;">MODEL</th>
    <th rowspan="4" style="width: 50px;font-size: 12px;">ค่าธรรมเนียม</th>
    <th rowspan="4" style="width: 50px;font-size: 12px;">
        <p class="m-0"> TOTAL</p>
        <p class="m-0">
            @(
                GetDatetimeClass.monthObjects
                .Single(x => x.Number == (int.Parse(SelectMonth.Number) - 1).ToString("D2"))
                .ShortName)
        </p>
    </th>
    <th rowspan="4" style="width: 30px;font-size: 12px;">
        <p class="m-0">MTD</p>
        <p class="m-0">@(
                GetDatetimeClass.monthObjects
            .Single(x => x.Number == (int.Parse(SelectMonth.Number) - 1).ToString("D2"))
            .ShortName)</p>
    </th>
    <th rowspan="4" style="width: 40px;font-size: 12px;">
        <p class="m-0">MTD</p>
        <p class="m-0">@SelectMonth.ShortName</p>
    </th>
    @if (!HideMaster)
    {
        <th colspan="10" class="text-center" style="font-size: 12px;">
            ค่ามาตรฐาน
        </th>
    }
    <th rowspan="4" style="width: 30px;font-size: 12px; padding-left:4px; padding-right:0px;">
        <p class="m-0">Sale</p>
        <p class="m-0">Last</p>
        <p class="m-0">Week</p>
    </th>
    <th rowspan="4" style="width: 30px;font-size: 12px; padding-left:4px; padding-right:0px;">
        <p class="m-0">Drop</p>
        <p class="m-0">Month</p>
    </th>
    <th colspan="@((Columns.Count() * 3) + ((Columns.Count() / 7) * 2))"
        class="text-center" style="font-size: 12px;">แพลนเดือน @SelectMonth.Name</th>
</tr>

<tr>
    @if (!HideMaster)
    {
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">จ</th>
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">อ</th>
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">พ</th>
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">พฤ</th>
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">ศ</th>
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">ส</th>
        <th rowspan="2" class="text-center" style="width: 20px;font-size: 12px;">อ</th>
        <th rowspan="2" style="width: 20px;font-size: 12px;">
            <p class="m-0">Drop</p>
            <p class="m-0">Week</p>
        </th>
        <th rowspan="2" style="width: 1rem;font-size: 12px;">
            <p class="m-0">Drop</p>
            <p class="m-0">Day</p>
        </th>
        <th rowspan="2" style="width: 200px;font-size: 12px;">Remark</th>
    }

    @foreach (var (obj, index) in Columns.WithIndex())
    {
        if ((index + 1) % 7 == 0)
        {
            var chk1 = obj.Value.IsCurrent;
            var chk2 = date.GetWeekNumberOfMonth() == obj.Key.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth() - 1;
            var action = ActionButton.Date.FirstOrDefault(x => x.Date.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth() == obj.Key.StringToDateTime("dd/MM/yyyy").GetWeekNumberOfMonth());
            var disable = ActionButton.Date.Count(x => x.Error);
            if (chk1 || chk2)
            {
                <th colspan="21" class="p-0" >
                    <div class="p-2 text-end" >
                        
                        @if(action == null)
                        {
                            <RadzenButton Text="Create"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Style="@($"{StyleHeaderButton(chk2)}text-transform: none;")"
                                          Size="Radzen.ButtonSize.Small"
                            Click="@(args => CalPlaaning(chk2 ,  obj.Key ))" />
                        }
                        else
                        {
                            <RadzenButton Text="Edit"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Style="@($"{StyleHeaderButton(chk2)}text-transform: none;")"
                                          Size="Radzen.ButtonSize.Small"
                                          Click="OnClickSavePlanCallback"
                                          Disabled="@(disable > 0 ? true : false)" />
                        }
                       
                    </div>
                </th>
                <th rowspan="3" colspan="1" class="text-center" style="font-size:12px;">
                    <p class="m-0">Sale</p>
                    <p class="m-0">Week</p>
                </th>
                <th rowspan="3" colspan="1" class="text-center" style="font-size:12px;">Diff</th>
            }
            else
            {
                <th colspan="21" class="p-0">
                    @* @DateTime.ParseExact(obj.Key, "dd/MM/yyyy", null) *@
                </th>
                <th rowspan="3" colspan="1" class="text-center" style="font-size:12px;">
                    <p class="m-0">Sale</p>
                    <p class="m-0">Week</p>
                </th>
                <th rowspan="3" colspan="1" class="text-center" style="font-size:12px;">Diff</th>
            }
        }
    }
</tr>

<tr>
    @foreach (var (obj, index) in Columns.WithIndex())
    {
        <th colspan="3"
            class="@(date.ToContainsDate(obj.Key) ? "today" : $"{obj.Value.ClassColor} color" )"
            style="font-size: 12px; text-align: center;">
            @obj.Value.FieldDateName
        </th>
    }
</tr>

<tr>
    @if (!HideMaster)
    {
        <th colspan="10" class="text-center" style="padding: 5px;">
            <div>
                <RadzenButton 
                    Text="Apply"
                    ButtonStyle="ButtonStyle.Secondary"
                    Style="width: 100%;text-transform: none;"
                    Size="Radzen.ButtonSize.Small"
                    Click="OnClickSavePlanCallback" />
            </div>
        </th>
    }

    @foreach (var (obj, index) in Columns.WithIndex())
    {
        <th class="@($"{obj.Value.ClassColor} color")"
            style="font-size: 12px;text-align: center;">@obj.Value.FieldDate</th>
        <th class="@($"{obj.Value.ClassColor} color")"
            style="width: 2rem; font-size: 12px; text-align: center;">@obj.Value.FieldValueName</th>
        <th class="@($"{obj.Value.ClassColor} color")"
            style="width: 1.5rem; font-size: 12px;">
            <div class="d-flex " style="width: 1rem;">
                <div class="mx-1">
                    @obj.Value.FieldRankName
                </div>
                
                <RadzenIcon Icon="find_replace" style="font-weight: 700;font-size: 16px;" @onclick="()=>SortRankCallback.InvokeAsync()" />
            </div>
              
        </th>
    }
</tr>
@implements IDisposable
@inject StateContainer StateContainer
@code {
    [Parameter]
    public MonthObject SelectMonth { get; set; } = new();

    [Parameter]
    public IDictionary<string, ColumnProperty> Columns { get; set; } = new Dictionary<string, ColumnProperty>();

    [Parameter]
    public bool HideMaster { get; set; }

    [Parameter]
    public EventCallback OnClickSavePlanCallback { get; set; }

    [Parameter]
    public EventCallback SortRankCallback { get; set; }

    [Parameter]
    public EventCallback<(string , string)> OnCalPlanningCallback { get; set; }

    [Parameter]
    public List<string> DayRank { get; set; } = new();

    [Parameter]
    public ChangeActionButton ActionButton { get; set; } = new();

    protected override void OnInitialized()
    {
        // var aa = ActionButton.Date.Find(x => x.Date == obj.Key);
        StateContainer.OnChange += StateHasChanged;
    }

    private string StyleHeaderButton(bool chk)
    {
        string style = string.Empty;

        if (chk)
        {
            style = "width: 100%;";
        }
        else
        {
            var name = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(GetDatetimeClass.currentDate);
            var index = GetDatetimeClass.defultday.FirstOrDefault(x => x.FullName.Contains(name.ToString()))!.Number;
            var con = (7 - index) - StateContainer.BeforeConfig;

            switch (con)
            {
                case 1:
                    style = $"width: {13.6 * con}%;";
                    break;
                case 2:
                    style = $"width: {14 * con}%;";
                    break;
                case 3:
                    style = $"width: {14.2 * con + 1}%;";
                    break;
                case 4:
                    style = $"width: {14.3 * con + 1}%;";
                    break;
                case 5:
                    style = $"width: {14.3 * con + 1}%;";
                    break;
                default :
                    style = $"width: 0%;display:none;";
                    break;
            }
        }

        return style;
    }

    private async Task CalPlaaning(bool chk , string date)
    {
        DateTime start;
        DateTime end;
        if (!chk)
        {
            start = GetDatetimeClass.currentDate.AddDays(1 + StateContainer.BeforeConfig);
            end = start.LastDayOfWeek();
        }
        else
        {
            start = GetDatetimeClass.currentDate.LastDayOfWeek().AddDays(1);
            end = start.AddDays(6);
        }

        await OnCalPlanningCallback.InvokeAsync((start.ToStringDate(), end.ToStringDate()));
    }

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }

    public string ClassHeader(int f, DateTime date, KeyValuePair<string, ColumnProperty> obj)
    {
        // if(f == 1)
        // {
        //     var classHeader = date.ToContainsDate(obj.Key) ? "today" : $"{obj.Value.ClassColor} color";
        //     return classHeader;
        // }
        // else
        // {
        //     var chkRank = DayRank.Count(x => x == obj.Key);
        //     var classHeader = date.ToContainsDate(obj.Key) ? "today" : chkRank > 0 ? "rank-error color" : $"{obj.Value.ClassColor} color";
        //     return classHeader;
        // }
        var classHeader = $"{obj.Value.ClassColor} color";
        return classHeader;
    }
}
 