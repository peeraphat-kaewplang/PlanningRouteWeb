@page "/"
@using Microsoft.AspNetCore.WebUtilities;

@{  
    var styleWidth = !hideMaster ? "widht-show-master" : "widht-hide-master";
}

feature-chage-product-group

<div class=@($"width-screen {styleWidth} command-wrapper")>
        <RadzenDropDown TValue="string"  Style="width: 100%; max-width: 200px; position: sticky;left: 0px;" TextProperty="ORGANIZATION_NAME"
            ValueProperty="ORGANIZATION_CODE" @bind-Value=@selectOrg Data=@optionsOrg Change="@(args => ChangeOrg(args))" />
        <RadzenDropDown TValue="string" TextProperty="ROUTE_NAME" ValueProperty="ROUTE_CODE"
            Style="width: 100%; max-width: 270px;position: sticky;left: 200px;" @bind-Value=@selectRoute Data=@optionsRoute 
            
            />
        <RadzenDropDown TValue="MonthObject" TextProperty="Name" 
            Style="width: 100%; max-width: 150px;position: sticky;left: 470px;" @bind-Value=@selectMonth Data=@optionsMonth />
        <RadzenButton Text="ค้นหา" Style="width: 100px; position: sticky;left: 620px;text-transform: none;"
            Click="@(args => OnClickSearch())" />
        <RadzenButton Text=@(!hideMaster ? "ซ่อนค่าคงที่" : "แสดงค่าคงที่") ButtonStyle="ButtonStyle.Info"
            Style="width: 100%; max-width: 150px;position: sticky;left: 720px;text-transform: none;" Click="@(args => OnClickChangeHideMaster())" />
        <RadzenButton Text="ตั้งค่าเริ่มต้น" ButtonStyle="ButtonStyle.Info"
            Style="position: sticky;left: 870px;text-transform: none;" Click=@ShowInlineDialog />
</div>

    @if (data.Count() != 0)
    {
        @*  <div class="view">
        <div class="wrapper"> *@
        <table class=@($"width-screen {styleWidth} table table-hover table-sm") style="margin: 0px !important;">
            <thead>
                <TableHeaderView 
                    HideMaster="hideMaster" 
                    Columns="columns" 
                    SelectMonth="selectMonth" 
                    ActionButton="actionButton"
                    SortRankCallback="@SortRank"
                    OnClickSavePlanCallback="@ShowDialogSave" 
                    OnCalPlanningCallback="@((args) => OnCalPlanning(args.Item1 , args.Item2 ))"/>
            </thead>
             <tbody>
                <TableBodyServiceView 
                    data="data" 
                    HideMaster="hideMaster"
                    SelectRoute="selectRoute"
                    SelectOrg="selectOrg"
                    ActionChangeProduct="actionChangeProduct"
                    ActionButton="actionButton"
                    OnChangCallback="@((args) => OnChangDetail(args.Item1 , args.Item2 ,args.Item3))" 
                    OnChangeRowCallback="@((args) => OnChangeRow(args.Item1 , args.Item2 ,args.Item3))"
                    OnChangeMasterCallback="@OnChangeMater"
                    OnChageRankCallback="@((args) => OnChageRank( args.Item2))"
                    ShowdialogChangeProductCallback="@((args) => ShowdialogChangeProduct(args.Item1 , args.Item2))"/>
            </tbody>
            <tfoot>
                <TableFooterView 
                    Data="data" 
                    Columns="columns" 
                    DropMonth="dropMonth" 
                    Target="target.DROP_PER_DAY"
                    HideMaster="hideMaster"/>
            </tfoot>
        </table>
   @*  </div>
    </div> *@
    }
     else 
    {
        <p>Data is empty!</P>
    }

@inject IPlanningService PlanningService
@inject DialogService DialogService
@inject IDialogService DialogServiceCustom
@inject TooltipService TooltipService
@inject NavigationManager NavManager
@inject StateContainer StateContainer

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ORG { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ROUTE { get; set; }


    Variant variant = Variant.Outlined;
    public bool hideMaster = false;
    public string selectOrg = "";
    public string selectRoute = "";
    public Target2 target = new();
    public MonthObject selectMonth = new();
    public List<int> dropMonth = new();
    public List<PlanningMasterData2> data = new();
    public IDictionary<string, ColumnProperty> columns { get; set; } = new Dictionary<string, ColumnProperty>();
    public IEnumerable<OrganizationData> optionsOrg = new List<OrganizationData>();
    public IEnumerable<MonthObject> optionsMonth = new List<MonthObject>();
    public IEnumerable<PlanningRouteWeb.Models.RouteData> optionsRoute = new List<PlanningRouteWeb.Models.RouteData>();
    public bool actionChangeProduct;
    public ChangeActionButton actionButton = new();
    public List<ActionButton> actionButtons = new List<ActionButton>
    {
        new ActionButton { Week = DateTime.Now.GetWeekNumberOfMonth()} ,
        new ActionButton { Week = DateTime.Now.GetWeekNumberOfMonth() + 1} ,
    };

    protected override async Task OnInitializedAsync() 
    {

        selectOrg = ORG!;
        selectRoute = ROUTE!;

        var dd = StateContainer.DateCurrent.Month.ToString("D2");
        selectMonth = GetDatetimeClass.monthObjects.Single(x => x.Number == dd);
        optionsMonth = GetDatetimeClass.monthObjects;

        await LoadOrg(ORG!);
        await LoadRoute();

        // if(!string.IsNullOrEmpty(selectRoute))
        // {

        // }

        if(ROUTE == null) selectRoute = optionsRoute.First().ROUTE_CODE;
        // await ShowBusyDialog();
    }

    public async Task LoadOrg(string org ="")
    {
        var req = new OrganizationRequest { ORG = org };
        var res = await PlanningService.PlanningGetORG(req);
        optionsOrg = res!.Data;
    }

    public async Task LoadRoute()
    {
        var req = new OrganizationRequest { ORG = $"{selectOrg}" };
        var res = await PlanningService.PlanningGetRoute(req);
        optionsRoute = res!.Data;
    }

    public async Task LoadMaster()
    {
        var req = new PanningMasterRequest 
        { 
            YEARMONTH = $"{StateContainer.DateCurrent.ToStringDate("yyyy")}{selectMonth.Number}",
            ORG = $"{selectOrg}", 
            Route = $"{selectRoute}" 
        };
        var (column, record , targets ) = await PlanningService.PlanningGetMaster(req);
        columns = column;
        data = record;
        target = new Target2
        {
            DROP_PER_DAY = !string.IsNullOrWhiteSpace(targets.DROP_PER_DAY) ? int.Parse(targets.DROP_PER_DAY) : 0,
            VALUE_PER_DAY = !string.IsNullOrWhiteSpace(targets.VALUE_PER_DAY) ? int.Parse(targets.VALUE_PER_DAY) : 0,
            VALUE_PER_MONTH = !string.IsNullOrWhiteSpace(targets.VALUE_PER_MONTH) ? int.Parse(targets.VALUE_PER_MONTH) : 0,
        };
       
        CalDropMonth();
        FindRankEmpty(record);

        StateHasChanged();
    }

    private void FindRankEmpty(List<PlanningMasterData2> data)
    {
        if(data.Count() != 0)
        {
            var detail = new List<PlanningDetail2>();
            foreach(var i in data)
            {
                if(i.GroupData.Count() > 1)
                {
                    var d  = i.GroupData.First().GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.IsCurrent);
                    detail.AddRange(d);
                    foreach(var g in i.GroupData.Skip(1))
                    {
                        var gg = g.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.IsCurrent).ToList();
                        detail.AddRange(gg);
                    }
                }
                else
                {
                    var d  = i.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.IsCurrent).ToList();
                    detail.AddRange(d);
                }

                if(detail.Count() != 0)
                {
                    // var weeks = detail.GroupBy(x => new { x.RANK, x.CALENDAR_DATE }, (key, grp) => new
                    // {
                    //     Week = DateTime.ParseExact(key.CALENDAR_DATE, "dd/MM/yyyy", null).GetWeekNumberOfMonth(),
                    // });

                    // if(weeks.Count() != 0)
                    // {
                    //     foreach(var w in weeks)
                    //     {
                    //         var action = actionButtons.Find(x => x.Week == w.Week);
                    //         action!.Action = "recreate";
                    //     }
                    // }
                    actionChangeProduct = false;
                    actionButton.Action = "recreate";
                }
                else
                {
                    actionChangeProduct = true;
                    actionButton.Action = "create";
                }

                if(i.GroupData.Count() > 1)
                {

                }
                else
                {
                    var row = i.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.RANK == null && x.IsCurrent);
                    if(row.Count() != 0)
                    {
                        actionChangeProduct = true;
                        foreach(var r in row)
                        {
                            var a = actionButton.Date.Find(x => x.Date == r.CALENDAR_DATE);
                            if(a == null)
                            {
                                actionButton.Date.Add(new DateError { Date = r.CALENDAR_DATE, Error = true });
                            }
                        }
                    }
                }
            }
        }
    }

    private async Task ChangeOrg(object args)
    {
        var req = new OrganizationRequest { ORG = $"{args}" };
        var route = await PlanningService.PlanningGetRoute(req);
        optionsRoute = route!.Data;
        selectRoute = route!.Data[0].ROUTE_CODE;
        StateHasChanged();
    }

    public async void OnClickSearch() 
    {
        StateContainer._dateTime = DateTime.Now;

        actionButton = new();
        await ShowBusyDialog();
        // NavManager.NavigateTo(NavManager.GetUriWithQueryParameter("ROUTE", selectRoute));
        StateHasChanged();
    }

    private void OnChangeMater(PlanningMasterData2 item)
    {
        var index = data.ToList().FindIndex(d => d.LOCATION_CODE == item.LOCATION_CODE && d.MSORT == item.MSORT);
        data[index].DROPWEEK = GetActualChecked(data[index]);
    } 

    private int GetActualChecked(PlanningMasterData2 data)
    {
        int value = 0;
        if (data.MONDAY) value++;
        if (data.TUESDAY) value++;
        if (data.WEDNESDAY) value++;
        if (data.THURSDAY) value++;
        if (data.FRIDAY) value++;
        if (data.SATURDAY) value++;
        if (data.SUNDAY) value++;
        return value;
    }

    private async Task OnClickSavePlan(DialogService ds)
    {
        var dataSave = new List<PlanningMasterData2>();
        foreach( var (item,index) in data.WithIndex())
        {
            foreach(var (row,idx) in item.GroupData.WithIndex()){

                var save = ConvertModel.PlanningMasterData2ViewModel(item.GroupData[idx]);
                var record = ConvertModel.Group2ModelToPlanningMasterData2(row);

                record.REMARK = item.GroupData[idx].REMARK;
                record.GETPLAN_DETAIL = item.GroupData[idx].GETPLAN_DETAIL;
                record.YEARMONTH = save.YEARMONTH;
                record.ORGANIZATION_CODE = save.ORGANIZATION_CODE;
                record.ROUTE_CODE = save.ROUTE_CODE;
                record.ROUTE_NAME = save.ROUTE_NAME;
                record.CUSTOMER_CODE = save.CUSTOMER_CODE;
                record.CUSTOMER_NAME = save.CUSTOMER_NAME;
                record.LOCATION_CODE = save.LOCATION_CODE;
                record.LOCATION_NAME = save.LOCATION_NAME;
                record.MACHINE_CODE = save.MACHINE_CODE;
                record.MACHINE_MODEL = save.MACHINE_MODEL;
                record.CHANGE_ACTION = save.CHANGE_ACTION;
                record.TOTAL_FEE = save.TOTAL_FEE;
                record.BEFORE_SALE = save.BEFORE_SALE;
                record.BEFORE_MTD = save.BEFORE_MTD;
                record.CURRENT_MTD = save.CURRENT_MTD;
                record.DROPWEEK = save.DROPWEEK;
                record.DROPDAY = save.DROPDAY;
                record.MONDAY = item.MONDAY;
                record.TUESDAY = item.TUESDAY;
                record.WEDNESDAY = item.WEDNESDAY;
                record.THURSDAY = item.THURSDAY;
                record.FRIDAY = item.FRIDAY;
                record.SATURDAY = item.SATURDAY;
                record.SUNDAY = item.SUNDAY;
                record.IS_DUPLICATE = save.IS_DUPLICATE;
                record.SALE_LAST_WEEK = save.SALE_LAST_WEEK;
                dataSave.Add(record);
            }

        }
        var recordData = dataSave.Select(x => ConvertModel.PlanningMasterData2ModeltoSave(x)).ToList();

        var response = await PlanningService.PlanningSavePlan(recordData);

        if(response.ErrorMessage == "success")
        {
            var Task = InvokeAsync(async () => {
               actionButton = new();
                await LoadMaster();
                DialogServiceCustom.DialogClose();
            });
            await DialogServiceCustom.BusyDialog("กำลังบันทึกข้อมูล...");
            
        }
        ds.Close(false);
        StateHasChanged();
    }
    //   private async Task OnClickSavePlan(DialogService ds)
    // {
    //     loading = true;
    //     var dataSave = new List<PlanningMasterData2>();
    //     foreach( var (item,index) in data.WithIndex())
    //     {
    //         item.REMARK = item.GroupData[0].REMARK;
    //         item.GETPLAN_DETAIL = item.GroupData[0].GETPLAN_DETAIL;
    //         dataSave.Add(item);
    //         if(item.GroupData.Count() > 1)
    //         {


    //             foreach(var (row,idx) in item.GroupData.Skip(1).WithIndex()){
    //                 var save = ConvertModel.PlanningMasterData2ViewModel(item.GroupData[idx + 1]);
    //                 var record = ConvertModel.Group2ModelToPlanningMasterData2(row);
    //                 record.YEARMONTH = save.YEARMONTH;
    //                 record.ORGANIZATION_CODE = save.ORGANIZATION_CODE;
    //                 record.ROUTE_CODE = save.ROUTE_CODE;
    //                 record.ROUTE_NAME = save.ROUTE_NAME;
    //                 record.CUSTOMER_CODE = save.CUSTOMER_CODE;
    //                 record.CUSTOMER_NAME = save.CUSTOMER_NAME;
    //                 record.LOCATION_CODE = save.LOCATION_CODE;
    //                 record.LOCATION_NAME = save.LOCATION_NAME;
    //                 record.MACHINE_CODE = save.MACHINE_CODE;
    //                 record.MACHINE_MODEL = save.MACHINE_MODEL;
    //                 record.CHANGE_ACTION = save.CHANGE_ACTION;
    //                 record.TOTAL_FEE = save.TOTAL_FEE;
    //                 record.BEFORE_SALE = save.BEFORE_SALE;
    //                 record.BEFORE_MTD = save.BEFORE_MTD;
    //                 record.CURRENT_MTD = save.CURRENT_MTD;
    //                 record.DROPWEEK = save.DROPWEEK;
    //                 record.REMARK = save.REMARK;
    //                 record.DROPDAY = save.DROPDAY;
    //                 record.MONDAY = save.MONDAY;
    //                 record.TUESDAY = save.TUESDAY;
    //                 record.WEDNESDAY = save.WEDNESDAY;
    //                 record.THURSDAY = save.THURSDAY;
    //                 record.FRIDAY = save.FRIDAY;
    //                 record.SATURDAY = save.SATURDAY;
    //                 record.SUNDAY = save.SUNDAY;
    //                 record.IS_DUPLICATE = save.IS_DUPLICATE;
    //                 record.SALE_LAST_WEEK = save.SALE_LAST_WEEK;
    //                 dataSave.Add(record);
    //             }
    //         }
    //     }
    //     var recordData = dataSave.Select(x => ConvertModel.PlanningMasterData2ModeltoSave(x)).ToList();
    //     var response = await PlanningService.PlanningSavePlan(recordData);
    //     if(response.ErrorMessage == "success")
    //     {
    //         await LoadMaster();
    //         actionButton = new();
    //     }
    //     loading = false;
    //     ds.Close(false);
    //     StateHasChanged();
    // }
    public void OnChangDetail(int index ,PlanningDetail2 current , List<PlanningDetail2> records)
    {
        // actionChangeProduct = true;
        data[index].GETPLAN_DETAIL = CalDataPlanning.CalEstimate(current , records);
        if (!current.STATUS_MANUAL)
        {
            var idx = data[index].GETPLAN_DETAIL.FindIndex(x => x.CALENDAR_DATE == current.CALENDAR_DATE);
            data[index].GETPLAN_DETAIL[idx].RANK = null;

            foreach(var (val , i) in data[index].GroupData.WithIndex()) {
                var j = val.GETPLAN_DETAIL.FindIndex(x => x.CALENDAR_DATE == current.CALENDAR_DATE);
                data[index].GroupData[i].GETPLAN_DETAIL[j].RANK = null;
                data[index].GroupData[i].GETPLAN_DETAIL[j].STATUS_MANUAL = false;
            }
        }
        else
        {
            foreach(var (val , i) in data[index].GroupData.WithIndex()) {
                var j = val.GETPLAN_DETAIL.FindIndex(x => x.CALENDAR_DATE == current.CALENDAR_DATE);
                data[index].GroupData[i].GETPLAN_DETAIL[j].STATUS_MANUAL = true;
            }
        }

        OnChageRank(current.CALENDAR_DATE);
        CalDropMonth();
    }

    // public void CheckRankOnChangeDetail(string date)
    // {
    //     var detail = new List<PlanningDetail2>();
    //     foreach(var i in data)
    //     {
    //         if(i.GroupData.Count() > 1)
    //         {
    //             var d  = i.GroupData.First().GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.CALENDAR_DATE == date);
    //             detail.AddRange(d);
    //             foreach(var g in i.GroupData.Skip(1))
    //             {
    //                 var gg = g.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.CALENDAR_DATE == date).ToList();
    //                 detail.AddRange(gg);
    //             }
    //         }
    //         else
    //         {
    //             var d  = i.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.CALENDAR_DATE == date).ToList();
    //             detail.AddRange(d);
    //         }
    //     }

    //     if(detail.Count() != 0)
    //     {
    //         var groupDetail = detail.GroupBy(x => new { x.RANK, x.CALENDAR_DATE }, (key, grp) => new
    //         {
    //             Date = key.CALENDAR_DATE,
    //             Rank = key.RANK,
    //             Sum = grp.Count()
    //         });

    //         if(groupDetail.Count() != 0)
    //         {
    //             var emptyRank = groupDetail.Where(x => x.Rank == null);
    //             if(emptyRank.Count() == 0)
    //             {
    //                 var duprank = groupDetail.Where(x => x.Sum > 1);
    //                 if(duprank.Count() == 0)
    //                 {
    //                     var action = actionButton.Date.Find(x => x.Date == date  );
    //                     if(action != null)
    //                     {
    //                         actionButton.Date.Remove(action!);
    //                     } 
    //                 }
    //             }
    //             else
    //             {
    //                 var action = actionButton.Date.Find(x => x.Date == date  );
    //                 if(action == null)
    //                 {
    //                     actionButton.Date.Add(new DateError { Date = date, Error = true });
    //                 } 
    //                 else
    //                 {
    //                     action!.Error = true;
    //                 }
    //             }
    //         }
    //     }
    // }

    private void CalDropMonth()
    {
        dropMonth = new List<int>();
        foreach (var item in data)
        {
            var countDropMonth = item.GETPLAN_DETAIL.Count(x => x.STATUS_MANUAL);
            dropMonth.Add(countDropMonth);
        }
    }

    private async Task ShowInlineDialog()
    {
        var result = await DialogService.OpenAsync("Change Config", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenFormField Text="DROP PER DAY" Variant="@variant">
                <RadzenNumeric ShowUpDown="false" TValue="int"@bind-Value=@target.DROP_PER_DAY/>
            </RadzenFormField>
            <RadzenFormField Text="VALUE PER DAY" Variant="@variant">
                <RadzenNumeric ShowUpDown="false" TValue="int"@bind-Value=@target.VALUE_PER_DAY/>
            </RadzenFormField>
            <RadzenFormField Text="VALUE PER MONTH" Variant="@variant">
                <RadzenNumeric ShowUpDown="false" TValue="int"@bind-Value=@target.VALUE_PER_MONTH/>
            </RadzenFormField>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Ok" Click="() => SaveTarget(ds)"  Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>);
    }

    private async Task ShowDialogSave()
    {
        var result = await DialogService.OpenAsync("ยืนยันการบันทึกข้อมูล", ds =>
        @<RadzenStack Gap="1.5rem">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="บันทึก" Click="() => OnClickSavePlan(ds)"  Style="width: 80px;" />
                    <RadzenButton Text="ยกเลิก" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>);
    }

    private async Task ShowdialogChangeProduct(ChangeProductRequest item , bool isCurrent) {
        var result = await DialogService.OpenAsync("เปลี่ยนสินค้า", ds =>
        @<ModalChangeProduct Item="item" IsCurrent="isCurrent" Dialog="ds"/>,new DialogOptions() { Width = "1700px", Height = "950px" });
        await ShowBusyDialog();
    }

    private async Task SaveTarget(DialogService ds)
    {
        var response = await PlanningService.PlanningSaveTarget(new TargetSave
            {
                ORG = selectOrg,
                Route = selectRoute,
                DROP_PER_DAY = target.DROP_PER_DAY.ToString(),
                VALUE_PER_DAY = target.VALUE_PER_DAY.ToString(),
                VALUE_PER_MONTH = target.VALUE_PER_MONTH.ToString(),
            });

        if(response.ErrorMessage == "success")
        {
            ds.Close(true);
        }
    }

    private async Task OnCalPlanning(string start , string end)
    {
        var body = new CalPlanning
        {
            YEARMONTH = $"{StateContainer.DateCurrent.ToStringDate("yyyy")}{selectMonth.Number}",
            ORG = $"{selectOrg}", 
            Route = $"{selectRoute}",
            StartDate = start ,
            EndDate = end
        };

        var jsonstr = Newtonsoft.Json.JsonConvert.SerializeObject (body);
        var response = await PlanningService.PlanningCalPlan(body);

        if(response.ErrorMessage == "success")
        {
            await LoadMaster();
        }
    }

    public class ChkRank
    {
        public string Location { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
        public bool Chk { get; set; }
        public bool State { get; set; }
    }

    private void OnChangeRow(PlanningMasterData2 item, Group2 grp , string action)
    {
        var index = data.FindIndex(d => d.LOCATION_CODE == item.LOCATION_CODE && d.MSORT == item.MSORT);
        if (action == "add")
        {   
            var newItem = ConvertModel.Group2ModelToModel(grp , true);
            newItem.IS_DUPLICATE = true;
            newItem.MSORT = (item.GroupData.Count() + 1).ToString();
            
            data[index].GroupData.Add(newItem);
        }
        else if (action == "del")
        {
            data[index].GroupData.Remove(grp);
        }

        var date = data[0].GroupData[0].GETPLAN_DETAIL
        .Where(x => x.IsCurrent)
        .Select(x => x.CALENDAR_DATE)
        .ToList();

        foreach(var x in date)
        {
            OnChageRank(x);
        }
    }

    private void OnChageRank(string date)
    {
        var detail = new List<DeatilRank>();
        if(data.Count() != 0 )
        {
            foreach(var i in data)
            {
                foreach(var j in i.GroupData )
                {
                    var d  = j.GETPLAN_DETAIL.Where(x => x.STATUS_MANUAL && x.CALENDAR_DATE == date)
                    .Select(x => new DeatilRank
                    {
                        MACHINE_CODE = i.MACHINE_CODE , RANK = x.RANK , CALENDAR_DATE = x.CALENDAR_DATE
                    })
                    .ToList();
                    detail.AddRange(d);
                }
            }

            if (detail.Count() != 0)
            {
                var action = actionButton.Date.Find(x => x.Date == date)!;
                var rankEmpty = detail.Where(d => d.RANK == null).ToList();

                var rankDup = detail.GroupBy(x => new { x.RANK, x.CALENDAR_DATE }, (key, grp) => new
                {
                    Date = key.CALENDAR_DATE,
                    Rank = key.RANK,
                    Sum = grp.Count()
                }).Where(x => x.Sum > 1).ToList();

                if  (rankEmpty.Count() > 0 || rankDup.Count() > 0)
                {
                    actionChangeProduct = true;
                    if (action == null)
                    {
                        actionButton.Date.Add(new DateError { Date = date, Error = true});
                    }
                    else
                    {
                        action.Date = date;
                        action.Error = (rankEmpty.Count() > 0 || rankDup.Count() > 0);
                    }
                } 
                else
                {
                    if (action != null)
                    {
                        actionChangeProduct = false;
                        actionButton.Date.Remove(action);
                    }
                } 

                if (action == null)
                {
                    if(rankEmpty.Count() > 0 || rankDup.Count() > 0)
                    {
                        var chkAction = actionButton.Date.Find(x => x.Date == date);
                        if(chkAction == null)
                        {
                             actionChangeProduct = true;
                             actionButton.Date.Add(new DateError { Date = date, Error = true });
                        }
                    }
                }
                else
                {
                    action.Date = date;
                    action.Error = (rankEmpty.Count() > 0 || rankDup.Count() > 0);
                }

            }

            actionChangeProduct = true;
            actionButton.Action = "save";
        }
    }
     
    private void SortRank()
    {
        // var aa = data.OrderByDescending(x => x.GETPLAN_DETAIL).ToList;
    }

    private void OnClickChangeHideMaster() => hideMaster = !hideMaster;

    public async Task ShowBusyDialog()
    {
        var Task = InvokeAsync(async () => {
            actionButton = new();
            await LoadMaster();
            DialogServiceCustom.DialogClose();
        });
        await DialogServiceCustom.BusyDialog("กำลังโหลดข้อมูล...");
    }
}